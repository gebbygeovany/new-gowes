[{"D:\\SKRIPSI\\gowes\\client\\src\\index.js":"1","D:\\SKRIPSI\\gowes\\client\\src\\App.js":"2","D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js":"3","D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js":"4","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js":"5","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Register.js":"6","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Login.js":"7","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js":"8","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js":"9","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js":"10","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js":"11","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js":"12","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js":"13","D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js":"14","D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js":"15","D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js":"16","D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js":"17","D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js":"18","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js":"19","D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js":"20","D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js":"21","D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js":"22","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js":"23","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js":"24","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js":"25","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js":"26","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js":"27","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js":"28","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js":"29","D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js":"30","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js":"31","D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js":"32","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js":"33","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js":"34","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js":"35","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js":"36","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js":"37","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js":"38","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js":"39","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js":"40","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js":"41","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js":"42","D:\\SKRIPSI\\gowes\\client\\src\\components\\ChatFloatingButton.js":"43","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js":"44","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js":"45","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js":"46","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js":"47","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js":"48","D:\\SKRIPSI\\gowes\\client\\src\\components\\ChatFloatingCard.js":"49","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js":"50","D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBarMyOrders.js":"51","D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js":"52"},{"size":427,"mtime":1612157259343,"results":"53","hashOfConfig":"54"},{"size":2750,"mtime":1613373652606,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":499162500000,"results":"56","hashOfConfig":"54"},{"size":771,"mtime":1611940613972,"results":"57","hashOfConfig":"54"},{"size":1188,"mtime":1612873839570,"results":"58","hashOfConfig":"54"},{"size":4498,"mtime":1612102806439,"results":"59","hashOfConfig":"54"},{"size":3470,"mtime":1612755749573,"results":"60","hashOfConfig":"54"},{"size":6895,"mtime":1612790027966,"results":"61","hashOfConfig":"54"},{"size":2499,"mtime":1611655963169,"results":"62","hashOfConfig":"54"},{"size":1696,"mtime":1612449942839,"results":"63","hashOfConfig":"54"},{"size":2297,"mtime":1611655953679,"results":"64","hashOfConfig":"54"},{"size":1599,"mtime":1611829443284,"results":"65","hashOfConfig":"54"},{"size":208,"mtime":1612079807198,"results":"66","hashOfConfig":"54"},{"size":1492,"mtime":1612280407086,"results":"67","hashOfConfig":"54"},{"size":2666,"mtime":1612874016410,"results":"68","hashOfConfig":"54"},{"size":441,"mtime":1611655804812,"results":"69","hashOfConfig":"54"},{"size":436,"mtime":1611655804808,"results":"70","hashOfConfig":"54"},{"size":6775,"mtime":1612961694383,"results":"71","hashOfConfig":"54"},{"size":1354,"mtime":1611766150622,"results":"72","hashOfConfig":"54"},{"size":1048,"mtime":1612443513291,"results":"73","hashOfConfig":"54"},{"size":1576,"mtime":1613372363193,"results":"74","hashOfConfig":"54"},{"size":2797,"mtime":1612622494884,"results":"75","hashOfConfig":"54"},{"size":1109,"mtime":1611902913199,"results":"76","hashOfConfig":"54"},{"size":1865,"mtime":1612883372814,"results":"77","hashOfConfig":"54"},{"size":1515,"mtime":1612607502141,"results":"78","hashOfConfig":"54"},{"size":1107,"mtime":1613373480482,"results":"79","hashOfConfig":"54"},{"size":1456,"mtime":1613373673331,"results":"80","hashOfConfig":"54"},{"size":6148,"mtime":1612316351458,"results":"81","hashOfConfig":"54"},{"size":573,"mtime":1612161104076,"results":"82","hashOfConfig":"54"},{"size":1202,"mtime":1612606427780,"results":"83","hashOfConfig":"54"},{"size":1459,"mtime":1612606586419,"results":"84","hashOfConfig":"54"},{"size":2353,"mtime":1612875819183,"results":"85","hashOfConfig":"54"},{"size":7416,"mtime":1612516891206,"results":"86","hashOfConfig":"54"},{"size":3884,"mtime":1612318581769,"results":"87","hashOfConfig":"54"},{"size":10981,"mtime":1612802074568,"results":"88","hashOfConfig":"54"},{"size":3380,"mtime":1612527894053,"results":"89","hashOfConfig":"54"},{"size":1729,"mtime":1612534636382,"results":"90","hashOfConfig":"54"},{"size":11650,"mtime":1612534764130,"results":"91","hashOfConfig":"54"},{"size":7988,"mtime":1613031893582,"results":"92","hashOfConfig":"54"},{"size":2526,"mtime":1612443513292,"results":"93","hashOfConfig":"54"},{"size":1050,"mtime":1612491792427,"results":"94","hashOfConfig":"54"},{"size":1051,"mtime":1612619475663,"results":"95","hashOfConfig":"54"},{"size":1994,"mtime":1612747734911,"results":"96","hashOfConfig":"54"},{"size":925,"mtime":1612871852522,"results":"97","hashOfConfig":"54"},{"size":5332,"mtime":1612877697411,"results":"98","hashOfConfig":"54"},{"size":1729,"mtime":1612876958543,"results":"99","hashOfConfig":"54"},{"size":3308,"mtime":1612620486594,"results":"100","hashOfConfig":"54"},{"size":730,"mtime":1612619440542,"results":"101","hashOfConfig":"54"},{"size":9990,"mtime":1612796660562,"results":"102","hashOfConfig":"54"},{"size":5120,"mtime":1613374291666,"results":"103","hashOfConfig":"54"},{"size":3987,"mtime":1613373825915,"results":"104","hashOfConfig":"54"},{"size":263,"mtime":1613374310939,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"e97are",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"108"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"108"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"108"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"108"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"108"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"108"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"108"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"108"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"108"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\SKRIPSI\\gowes\\client\\src\\index.js",[],["236","237"],"D:\\SKRIPSI\\gowes\\client\\src\\App.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js",["238","239"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport FilterBar from '../components/FilterBar';\r\nimport { FETCH_ITEMS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data, refetch } = useQuery(FETCH_ITEMS_QUERY,)\r\n  const { getItems: items } = data ? data : []\r\n\r\n  \r\n  console.log(items)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Row className=\"page-title\">\r\n        <FilterBar></FilterBar>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {loading ? (\r\n          <h1>Loading posts..</h1>\r\n        ) : (\r\n            <Transition.Group duration={1000}>\r\n              {items &&\r\n                items.map((item) => (\r\n                  <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                    <ShopCard item={item} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Register.js",["240"],"import React, { useContext, useState } from 'react'\r\nimport { Button, Form, Grid, Header, Segment, Message } from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction Register(props) {\r\n    const context = useContext(AuthContext)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { onChange, onSubmit, values } = useForm(registerUser, {\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        email: '',\r\n    })\r\n\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data: { register: userData } }) {\r\n            context.login(userData)\r\n            props.history.push('/')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function registerUser() {\r\n        addUser()\r\n    }\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ height: '100vh', marginTop: 100 }}>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Header color='standard' textAlign='center'>\r\n                    <span className=\"logoLogin\">Register account</span>\r\n                </Header>\r\n                <Form size='large' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                    <Segment style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='mail'\r\n                            iconPosition='left'\r\n                            placeholder='Email'\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            error={errors.email ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='user'\r\n                            iconPosition='left'\r\n                            placeholder='Name'\r\n                            name=\"name\"\r\n                            value={values.name}\r\n                            error={errors.name ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Password'\r\n                            type='password'\r\n                            name=\"password\"\r\n                            value={values.password}\r\n                            error={errors.password ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Confirm Password'\r\n                            type='password'\r\n                            name=\"confirmPassword\"\r\n                            value={values.confirmPassword}\r\n                            error={errors.confirmPassword ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n\r\n                        <Button color='secondary' fluid size='large'>\r\n                            Register\r\n                        </Button>\r\n                    </Segment>\r\n                </Form>\r\n                {Object.keys(errors).length > 0 && (\r\n                    <div className='ui error message'>\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map(value => (\r\n                                <li key={value}>{value}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $name: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        name: $name\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n        id\r\n        email\r\n        token\r\n    }\r\n  }\r\n`\r\n\r\nexport default Register;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Login.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js",["241"],"import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Label, Image, Popup } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction PostCard({\r\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }}) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid style={{boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'}}>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n        <Button onClick={()=>console.log(likes)}>test</Button>\r\n\r\n        <MyPopup content=\"Comment On Post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"blue\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js",["242"],"import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button, Confirm, Popup } from 'semantic-ui-react'\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n\r\n    const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n    const [deletePostOrMutation] = useMutation(mutation, {\r\n        update(proxy, result) {\r\n            setConfirmOpen(false)\r\n            // TODO: remove post cache\r\n\r\n            if (!commentId) {\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                })\r\n\r\n                proxy.writeQuery({\r\n                    query: FETCH_POSTS_QUERY,\r\n                    data: {\r\n                        getPosts: data.getPosts.filter(p => p.id !== postId)\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n\r\n            if (callback) callback()\r\n        },\r\n        variables: { postId, commentId }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <MyPopup content={commentId ? \"Delete Comment\" : \"Delete Post\"}>\r\n                <Button\r\n                    as=\"div\"\r\n                    color=\"red\"\r\n                    floated=\"right\"\r\n                    onClick={() => setConfirmOpen(true)}\r\n                >\r\n                    <Icon name=\"trash\" style={{ margin: 0 }} />\r\n                </Button>\r\n            </MyPopup>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={deletePostOrMutation}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n    mutation deletePost($postId:ID!){\r\n        deletePost(postId: $postId)\r\n    }\r\n`\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation deleteComment($postId:ID!, $commentId:ID!){\r\n        deleteComment(postId: $postId, commentId: $commentId){\r\n            id\r\n            comments{\r\n                id\r\n                username\r\n                createdAt\r\n                body\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default DeleteButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js",["243"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Label, Button, Popup } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false)\r\n  useEffect(() => {\r\n    if (user && likes.find(like => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else {\r\n      setLiked(false)\r\n    }\r\n  }, [user, likes])\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  })\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n        <Button color=\"teal\" basic>\r\n          <Icon name=\"heart\" />\r\n        </Button>\r\n      )\r\n  ) : (\r\n      <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    );\r\n  return (\r\n    <>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>\r\n        <Button as='div' labelPosition='right' onClick={likePost}>\r\n          {likeButton}\r\n          <Label basic color='teal' pointing='left'>\r\n            {likeCount}\r\n          </Label>\r\n        </Button>\r\n      </MyPopup>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId:ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default LikeButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js",["244"],"import React, { useContext, useState } from 'react'\r\nimport { Menu, Dropdown, Button, Segment, Image, Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IoMdBicycle } from 'react-icons/io';\r\n\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { user, logout } = useContext(AuthContext)\r\n    const pathname = window.location.pathname\r\n    const path = pathname === '/' ? 'profile' : pathname.substr(1)\r\n\r\n    const [activeItem, setActiveItem] = useState(path)\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n    }\r\n\r\n    const handleItemHover = () => {\r\n        // handleItemClick()\r\n        props.onDimmed()\r\n    }\r\n\r\n    const navBar = user ? (\r\n\r\n        // logged in navbar\r\n        <Segment>\r\n            <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                <Menu size=\"large\" fluid inverted secondary>\r\n                    <Menu.Item></Menu.Item>\r\n                    <Menu.Item\r\n                        active={activeItem === 'home'}\r\n                        onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    >\r\n                        <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                        <div className=\"logo\">Gowes</div>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        name='shop'\r\n                        active={activeItem === 'shop'}\r\n                        onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    />\r\n                    <Menu.Item\r\n                        name='event'\r\n                        active={activeItem === 'event'}\r\n                        onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/event\"\r\n                    />\r\n\r\n\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            name='bookmark'\r\n                            active={activeItem === 'bookmark'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/bookmark\"\r\n                        >\r\n                            <MyPopup content=\"Bookmarks\">\r\n                                <Icon name=\"bookmark\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='cart'\r\n                            active={activeItem === 'cart'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/cart\"\r\n                        >\r\n                            <MyPopup content=\"Cart\">\r\n                                <Icon name=\"cart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        >\r\n                            <Image circular src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\" style={{ height: 30, marginRight: 0 }} verticalAlign='middle' />\r\n                            <Dropdown item text={user.name} style={{ marginLeft: 0 }}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to=\"/profile/profileCard\">My Profile</Dropdown.Item>\r\n                                    <Dropdown.Item as={Link} to=\"/myStore/myStoreDetailsCard\">My Store</Dropdown.Item>\r\n                                    <Dropdown.Item>Transaksi</Dropdown.Item>\r\n                                    <Dropdown.Item as={Link} to=\"/\" name='logout' onClick={logout}>Logout</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item></Menu.Item>\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </div>\r\n        </Segment>\r\n   \r\n   ) : (\r\n        // guest navbar\r\n            <Segment inverted>\r\n                <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                    <Menu fluid inverted secondary size='large'>\r\n                        <Menu.Item></Menu.Item>\r\n                        <Menu.Item\r\n                            active={activeItem === ''}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        >\r\n                            <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                            <div className=\"logo\">Gowes</div>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='shop'\r\n                            active={activeItem === 'shop'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        />\r\n                        <Menu.Item\r\n                            name='event'\r\n                            active={activeItem === 'event'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/event\"\r\n                        />\r\n\r\n\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                <Button\r\n                                    color='teal'\r\n                                    inverted\r\n                                    name='login'\r\n                                    active={activeItem === 'login'}\r\n                                    onClick={handleItemClick}\r\n                                    as={Link}\r\n                                    to=\"/login\"\r\n                                    style={{ marginRight: 10 }}\r\n                                >\r\n                                    Sign In\r\n                            </Button>\r\n                            </Menu.Item>\r\n                            <Menu.Item></Menu.Item>\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </div>\r\n            </Segment>\r\n\r\n        )\r\n    return navBar\r\n}\r\n\r\nexport default NavBar","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js",["245"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction BookmarkButton({ user, item: { id, bookmarkedBy } }) {\r\n    const [bookmarked, setBookmarked] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (user.user && bookmarkedBy.find(bookmark => bookmark.userId === user.user.id)) {\r\n            setBookmarked(true)\r\n        } else {\r\n            setBookmarked(false)\r\n        }\r\n    }, [user, bookmarkedBy])\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    if (user.user) {\r\n        console.log(user.user.id)\r\n\r\n    }\r\n\r\n    const [bookmarkPost] = useMutation(BOOKMARK_ITEM_MUTATION, {\r\n        variables: { itemId: id },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_BOOKMARKS_QUERY\r\n            })\r\n\r\n            if (!bookmarked) {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: [result.data.bookmarkItem, ...data.getBookmarks]\r\n                    }\r\n                })\r\n            } else {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: data.getBookmarks.filter(item => item.id !== id)\r\n                    },\r\n                })\r\n            }\r\n\r\n\r\n\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n    })\r\n\r\n    const bookmarkButton = user.user ? (\r\n        bookmarked ? (\r\n            <Button fluid color=\"teal\">\r\n                <Icon name=\"bookmark outline\" />\r\n            </Button>\r\n        ) : (\r\n                <Button fluid color=\"teal\" basic>\r\n                    <Icon color='#fff' name=\"bookmark\" />\r\n                </Button>\r\n            )\r\n    ) : (\r\n            <Button fluid as={Link} to=\"/login\" color=\"teal\" basic>\r\n                <Icon name=\"bookmark\" />\r\n            </Button>\r\n        );\r\n    return (\r\n\r\n        <MyPopup content={bookmarked ? 'Remove Bookmark' : 'Bookmark'}>\r\n            <div as='div' onClick={user ? bookmarkPost : ''}>\r\n                {bookmarkButton}\r\n            </div>\r\n        </MyPopup>\r\n\r\n    )\r\n}\r\n\r\nconst BOOKMARK_ITEM_MUTATION = gql`\r\n    mutation bookmarkItem($itemId:ID!){\r\n        bookmarkItem(itemId: $itemId){\r\n            id\r\n            bookmarkedBy{\r\n                id\r\n                userId\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default BookmarkButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js",["246","247"],"import React from 'react';\r\nimport { Grid, Ref, Message, Transition } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport CartCard from '../components/CartCard';\r\nimport ItemSummaryCard from '../components/ItemSummaryCard';\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction Cart() {\r\n  const contextRef = React.createRef();\r\n\r\n  const { loading, data } = useQuery(FETCH_USER_CART_QUERY)\r\n  let { getUserCartItems: cartItems } = data ? data : []\r\n\r\n  console.log(cartItems)\r\n\r\n  let cartMarkup = (\r\n    <>\r\n      <br></br>\r\n      <Grid.Column width={16}><h1>Cart</h1></Grid.Column>\r\n      <>\r\n        <Message\r\n          error\r\n          icon='cart'\r\n          header='You dont have items in cart'\r\n          content='add items to cart'\r\n          style={{ marginBottom: 202 }}\r\n        />\r\n      </>\r\n    </>\r\n  )\r\n  if (!loading) {\r\n    if (cartItems.length !== 0) {\r\n      let group = cartItems.reduce((r, a) => {\r\n        r[a.item.user.id] = [...r[a.item.user.id] || [], a];\r\n        return r;\r\n      }, {});\r\n      console.log(group)\r\n\r\n      Object.keys(group).map(function (key, index) {\r\n        console.log(group[key])\r\n      })\r\n      cartMarkup = (\r\n        <Ref innerRef={contextRef}>\r\n          <Grid stackable>\r\n            <Grid.Column width={16}></Grid.Column>\r\n            <Grid.Column width={12} >\r\n              {group &&\r\n                Object.keys(group).map((key, index) =>\r\n                (\r\n                  <CartCard cartItem={group[key]}></CartCard>\r\n                )\r\n                )\r\n              }\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <ItemSummaryCard contextRef={contextRef}  ></ItemSummaryCard>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Ref>\r\n      )\r\n    }\r\n\r\n\r\n  }\r\n  return cartMarkup\r\n}\r\n\r\nexport default Cart;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js",["248","249"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition, Message } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data } = useQuery(FETCH_BOOKMARKS_QUERY)\r\n  const { getBookmarks: bookmarks } = data ? data : []\r\n\r\n  console.log(bookmarks)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Column width={16}></Grid.Column>\r\n      <Grid.Column width={16}><h1>Bookmarked Items</h1></Grid.Column>\r\n      <Grid.Row>\r\n        {loading || bookmarks==0? (\r\n          <>\r\n          <Message\r\n            error\r\n            icon='bookmark'\r\n            header='You dont have any bookmarked items'\r\n            content='add bookmark on your favorite item'\r\n            style={{marginBottom:109}}\r\n          />\r\n          <Grid></Grid>\r\n          </>\r\n        ) : (\r\n            <>\r\n              <Transition.Group duration={700}>\r\n                {bookmarks &&\r\n                  bookmarks.map((bookmark) => (\r\n                    <Grid.Column key={bookmark.id} style={{ marginBottom: 20 }}>\r\n                      <ShopCard item={bookmark} />\r\n                    </Grid.Column>\r\n                  ))}\r\n              </Transition.Group>\r\n            </>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js",["250"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\n\r\nfunction ProfileCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n    const [avatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }} className={loading ? \"loading\" : \"\"}>\r\n                        <Card.Content header='Profile Details' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.buyer.avatar} wrapped ui={false} />\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='user'\r\n                                            iconPosition='left'\r\n                                            placeholder='Name'\r\n                                            label='Name'\r\n                                            value={currentUser.buyer.name}\r\n                                            name=\"name\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='mail'\r\n                                            iconPosition='left'\r\n                                            placeholder='Email'\r\n                                            label='Email'\r\n                                            value={currentUser.email}\r\n                                            name=\"email\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='phone'\r\n                                            iconPosition='left'\r\n                                            placeholder='Phone Number'\r\n                                            label='Phone Number'\r\n                                            value={currentUser.email}\r\n                                            name=\"phone\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='calendar'\r\n                                            iconPosition='left'\r\n                                            placeholder='Birth Date'\r\n                                            label='Birth Date'\r\n                                            name=\"birthDate\"\r\n                                            value={currentUser.buyer.birthDate}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='City'\r\n                                            label='Address'\r\n                                            name=\"city\"\r\n                                            value=\"Bandung\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Districts'\r\n                                            name=\"districts\"\r\n                                            value=\"Ujungberung\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Postal Code'\r\n                                            name=\"postalCode\"\r\n                                            value=\"40617\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Address Details'\r\n                                            name=\"addressDetails\"\r\n                                            value=\"Komplek Pasanggrahan Indah Blok 17 no. 8\"\r\n                                            control={TextArea}\r\n\r\n                                        />\r\n                                        <Button color='secondary' size='small' as={Link} to=\"/editProfileCard\">\r\n                                            <Icon name=\"edit outline\"></Icon>\r\n                                            Edit\r\n                                        </Button>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n\r\n\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n        </>\r\n    )\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            phone\r\n            address\r\n            balance\r\n            buyer{\r\n                name\r\n                birthDate\r\n                avatar\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default ProfileCard","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js",["251","252","253"],"import React, { useContext } from 'react';\r\nimport { FETCH_ITEM_QUERY, FETCH_CART_QUERY } from '../util/graphql';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Ref, Rail } from 'semantic-ui-react';\r\n\r\n\r\nimport ItemTransactionCard from '../components/ItemTransactionCard'\r\nimport ItemDetailCard from '../components/ItemDetailCard'\r\nimport ItemImagesCard from '../components/ItemImagesCard'\r\nimport ItemReviewsCard from '../components/ItemReviewsCard'\r\nimport ReviewSummaryCard from '../components/ReviewSummaryCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction ItemDetail(props) {\r\n  const itemId = props.match.params.itemId;\r\n  const context = useContext(AuthContext);\r\n  const contextRef = React.createRef();\r\n  const imageContextRef = React.createRef();\r\n  const { loading, data: itemData, data: reviewData } = useQuery(FETCH_ITEM_QUERY, {\r\n    variables: {\r\n      itemId: itemId\r\n    }\r\n  })\r\n  const { getItem: item } = itemData ? itemData : []\r\n  const { getItemReviews: reviews } = reviewData ? reviewData : []\r\n\r\n\r\n  let postMarkup = (<p>Loading item..</p>);\r\n  if (item) {\r\n    postMarkup = (\r\n      <Ref innerRef={contextRef}>\r\n        <Grid>\r\n          <Grid.Column width={12}>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <Ref innerRef={imageContextRef}>\r\n                <Grid>\r\n                  <Grid.Column width={6}>\r\n                    <ItemImagesCard contextRef={imageContextRef} images={item.images} />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={10} style={{ paddingTop: 50 }}>\r\n                    <ItemDetailCard item={item} />\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Ref>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <ReviewSummaryCard />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <ItemReviewsCard reviews={reviews} />\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={4}>\r\n            {context.user && context.user.id !== item.user.id ? (\r\n              <ItemTransactionCard contextRef={contextRef} item={item} />\r\n            ) : (\r\n                <div></div>\r\n              )}\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Ref>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nexport default ItemDetail;","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js",["254"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { storage } from '../firebase';\r\nimport { useForm } from '../util/hooks'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction EditMyStoreDetailsCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n\r\n    const fileInputRef = React.createRef();\r\n    const [avatar, setAvatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    const fileChange = e => {\r\n        const image = e.target.files[0]\r\n        if (image) {\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => { },\r\n                error => { console.log(error) },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            setAvatar(url);\r\n                            console.log(url);\r\n                        });\r\n                });\r\n        }\r\n    };\r\n    console.log(\"File chosen --->\", avatar);\r\n\r\n    let userObj = {\r\n        avatar: '',\r\n        username: currentUser.seller.username,\r\n        description: currentUser.seller.description\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(updateSellerProfile, userObj)\r\n\r\n    const [sellerProfileUpdate, { }] = useMutation(UPDATE_SELLER_PROFILE_MUTATION, {\r\n        update(_, { data: { updateSellerProfile: sellerData } }) {\r\n            sellerData.username = sellerData.seller.username;\r\n            context.login(sellerData)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/myStore/myStoreDetailsCard')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            setSave(true)\r\n        },\r\n\r\n        variables: values\r\n    })\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    function updateSellerProfile() {\r\n        values.avatar = avatar\r\n        sellerProfileUpdate()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content header='My Store Detail Form' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.seller.avatar} wrapped ui={false} />\r\n                                        <Card.Content extra>\r\n                                            <Form>\r\n                                                <Button fluid onClick={() => fileInputRef.current.click()}>Change Avatar</Button>\r\n                                                <input ref={fileInputRef} type=\"file\" hidden onChange={fileChange} />\r\n                                            </Form>\r\n                                        </Card.Content>\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Store Name'\r\n                                            label='Store Name'\r\n                                            value={values.username}\r\n                                            name=\"username\"\r\n                                            onChange={onChange}\r\n                                            error={errors.username ? true : false}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            iconPosition='left'\r\n                                            placeholder='Store Description'\r\n                                            label='Description'\r\n                                            control={TextArea}\r\n                                            value={values.description}\r\n                                            name=\"description\"\r\n                                            onChange={onChange}\r\n                                        />\r\n                                        <Button color='primary' size='small'>\r\n                                            <Icon name=\"check circle outline\"></Icon>\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form>\r\n                                    {showMessage()}\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            seller{\r\n            id\r\n            username\r\n            avatar\r\n            description\r\n            description\r\n            createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst UPDATE_SELLER_PROFILE_MUTATION = gql`\r\n    mutation updateSellerProfile(\r\n        $username: String!\r\n        $avatar: String!\r\n        $description: String!\r\n    ){\r\n        updateSellerProfile(\r\n            sellerProfileInput:{\r\n            username: $username\r\n            avatar: $avatar\r\n            description: $description\r\n            }\r\n        ) {\r\n            id\r\n            token\r\n            seller{\r\n                id\r\n                username\r\n                avatar\r\n                description\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default withRouter(EditMyStoreDetailsCard)","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js",["255"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { storage } from '../firebase';\r\nimport { useForm } from '../util/hooks'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\n\r\nfunction EditProfileCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n    let userObj = {\r\n        avatar: '',\r\n        name: currentUser.buyer.name,\r\n        email: currentUser.email,\r\n        phone: currentUser.phone,\r\n        birthDate: currentUser.buyer.name\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(updateUserProfile, userObj)\r\n\r\n    // console.log(\"user data\", currentUser)\r\n\r\n    const fileInputRef = React.createRef();\r\n    const [avatar, setAvatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    const fileChange = e => {\r\n        const image = e.target.files[0]\r\n        if (image) {\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => { },\r\n                error => { console.log(error) },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            setAvatar(url);\r\n                            console.log(url);\r\n                        });\r\n                });\r\n        }\r\n    };\r\n    console.log(\"File chosen --->\", avatar);\r\n\r\n    const [updateProfile, { }] = useMutation(UPDATE_PROFILE_MUTATION, {\r\n        update(_, { data: { updateUserProfile: userData } }) {\r\n            userData.name = userData.buyer.name;\r\n            context.login(userData)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/profile/profileCard')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            setSave(true)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n\r\n    function updateUserProfile() {\r\n        values.avatar = avatar\r\n        updateProfile()\r\n    }\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    const options = [\r\n        { key: 'bandung', text: 'Bandung', value: 'bandung' },\r\n        { key: 'jakarta', text: 'Jakarta', value: 'jakarta' },\r\n        { key: 'Malang', text: 'Malang', value: 'Malang' },\r\n    ]\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }} className={loading ? \"loading\" : \"\"}>\r\n                        <Card.Content header='Profile Details' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.buyer.avatar} wrapped ui={false} />\r\n                                        <Card.Content extra>\r\n                                            <Form>\r\n                                                <Button fluid onClick={() => fileInputRef.current.click()}>Change Avatar</Button>\r\n                                                <input ref={fileInputRef} type=\"file\" hidden onChange={fileChange} />\r\n                                            </Form>\r\n                                        </Card.Content>\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='user'\r\n                                            iconPosition='left'\r\n                                            placeholder='Name'\r\n                                            label='Name'\r\n                                            value={values.name}\r\n                                            name=\"name\"\r\n                                            onChange={onChange}\r\n                                            error={errors.name ? true : false}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='mail'\r\n                                            iconPosition='left'\r\n                                            placeholder='Email'\r\n                                            label='Email'\r\n                                            value={values.email}\r\n                                            name=\"email\"\r\n                                            onChange={onChange}\r\n                                            error={errors.email ? true : false}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='phone'\r\n                                            iconPosition='left'\r\n                                            placeholder='Phone Number'\r\n                                            label='Phone Number'\r\n                                            value={values.phone}\r\n                                            name=\"phone\"\r\n                                            onChange={onChange}\r\n                                            error={errors.phone ? true : false}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='calendar'\r\n                                            iconPosition='left'\r\n                                            placeholder='Birth Date'\r\n                                            label='Birth Date'\r\n                                            name=\"birthDate\"\r\n                                            value={values.date}\r\n                                            type=\"date\"\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Select\r\n                                            fluid\r\n                                            placeholder='City'\r\n                                            label='Address'\r\n                                            name=\"city\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n                                            options={options}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Districts'\r\n                                            name=\"districts\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Postal Code'\r\n                                            name=\"postalCode\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Address Details'\r\n                                            name=\"addressDetails\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n                                            control={TextArea}\r\n\r\n                                        />\r\n                                        <Button color='teal' size='small'>\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form>\r\n                                    {showMessage()}\r\n                                </Grid.Column>\r\n                            </Grid>\r\n\r\n\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n        </>\r\n    )\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            phone\r\n            address\r\n            balance\r\n            buyer{\r\n                name\r\n                birthDate\r\n                avatar\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst UPDATE_PROFILE_MUTATION = gql`\r\n    mutation updateUserProfile(\r\n        $avatar: String!\r\n        $name: String!\r\n        $email: String!\r\n        $phone: String!\r\n        $birthDate: String!\r\n    ){\r\n    updateUserProfile(\r\n        userProfileInput:{\r\n            avatar: $avatar\r\n            name: $name\r\n            email: $email\r\n            phone: $phone\r\n            birthDate: $birthDate\r\n            }\r\n        ) {\r\n        id\r\n        email\r\n        phone\r\n        address\r\n        balance\r\n        token\r\n        buyer {\r\n            name\r\n            birthDate\r\n            avatar\r\n        }\r\n    }\r\n    }\r\n`\r\n\r\nexport default withRouter(EditProfileCard)","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js",["256"],"import React, { useContext } from 'react'\r\nimport { Button, Card, Icon, Grid, Message, Image, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\n\r\n\r\nimport MyItemsCard from '../components/MyItemsCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction MyItemList(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const { loading, data } = useQuery(FETCH_ITEM_SELLER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n            \r\n        }\r\n    })\r\n    const { getSellerItems: sellerItems } = data ? data : []\r\n\r\n    return (\r\n        <>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"My Items\">\r\n                </Card.Content>\r\n                <Button color=\"teal\" as={Link} to=\"/addItem\">\r\n                    <Icon name=\"plus\"></Icon>\r\n                    Add Atem\r\n                </Button>\r\n            </Card>\r\n            {loading ? (\r\n                <Message\r\n                    error\r\n                    icon='inbox'\r\n                    header='You dont have any items'\r\n                    content='add items to sell your things'\r\n                />\r\n            ) : (\r\n                    <>\r\n                        <Divider />\r\n                        <Grid container verticalAlign='middle'>\r\n                            <Grid.Column width={2} centered>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2} verticalAlign='middle' >\r\n                                <h4>Item Name</h4>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={3} verticalAlign='middle' c>\r\n                                <h4>Remaining Stock</h4>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                                <h4>Selled</h4>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                                <h4>Price</h4>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                                <h4>Rating</h4>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        <Divider />\r\n                        {sellerItems &&\r\n                            sellerItems.map((sellerItem) => (\r\n                                <Grid.Column key={sellerItem.id} style={{ marginBottom: 20 }}>\r\n                                    <MyItemsCard item={sellerItem}></MyItemsCard>\r\n                                </Grid.Column>\r\n                            ))}\r\n                    </>\r\n                )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport const FETCH_ITEM_SELLER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getSellerItems(userId: $userId){\r\n    id\r\n    name\r\n    price\r\n    createdAt\r\n    description\r\n    weight\r\n    images{\r\n      id\r\n      downloadUrl\r\n    }\r\n    bookmarkedBy{\r\n      id\r\n      userId\r\n      createdAt\r\n    }\r\n    user{\r\n      seller{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\nexport default MyItemList","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js",["257","258"],"import React, { useContext } from 'react';\r\nimport { Card, Icon, Image, Grid } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction MyItemsCard({item: { name, price, stock }}) {\r\n    const { user } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Grid container>\r\n                <Grid.Column width={2} centered>\r\n                    <Image\r\n                        fluid\r\n                        centered\r\n                        rounded\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        size='small'\r\n                        style={{ margin: 10 }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle'>\r\n                    <h4>{name}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>4</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>100</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>{price}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                    <Icon name='star' style={{ color: 'gold' }}></Icon>\r\n                    4\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MyItemsCard;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js",["259","260","261","262"],"import React, { useContext, useState } from 'react'\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction AddItem(props) {\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const { onChange, onSubmit, values } = useForm(addItem, {\r\n        name: '',\r\n        price: 0,\r\n        stock: 0,\r\n        category: '',\r\n        condition: '',\r\n        weight: 0,\r\n        description: '',\r\n        length: 0,\r\n        width: 0,\r\n        height: 0\r\n    })\r\n\r\n    const [submitItem, { loading }] = useMutation(ADD_ITEM_MUTATION, {\r\n        update(_, { data: { addItem: items } }) {\r\n            // context.login(items)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/mystore/myItemsList')\r\n            console.log(\"data\", addItem)\r\n\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n            setSave(true)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function addItem() {\r\n        values.price = parseInt(values.price)\r\n        values.stock = parseInt(values.stock)\r\n        values.weight = parseInt(values.weight)\r\n        values.length = parseInt(values.length)\r\n        values.width = parseInt(values.width)\r\n        values.height = parseInt(values.height)\r\n        submitItem()\r\n    }\r\n    console.log(values)\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    const options = [\r\n        { key: 'm', text: 'Male', value: 'male' },\r\n        { key: 'f', text: 'Female', value: 'female' },\r\n        { key: 'o', text: 'Other', value: 'other' },\r\n    ]\r\n\r\n    return (\r\n        <Grid centered stackable>\r\n            <Grid.Column width={12}>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Image' />\r\n                    <Card.Content>\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button\r\n                            fluid\r\n                            color='standard'\r\n                            size='small'\r\n                        >\r\n                            <Icon name=\"plus\"></Icon>\r\n                            add Image\r\n                            </Button>\r\n                    </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Details' />\r\n                    <Card.Content extra>\r\n                        <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"} noValidate>\r\n                            <Form.Input\r\n                                fluid\r\n                                placeholder='Item Name'\r\n                                label='Item Name'\r\n                                value={values.name}\r\n                                name=\"name\"\r\n                                onChange={onChange}\r\n                            />\r\n                            <Form.Group inline>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Category'\r\n                                    label='Category'\r\n                                    onChange={onChange}\r\n                                    name=\"category\"\r\n                                    control='select'\r\n                                    value={values.category}\r\n                                >\r\n                                    <option value='male'>Sparepart</option>\r\n                                    <option value='female'>Accessories</option>\r\n                                    <option value='male'>Apparel</option>\r\n                                </Form.Field>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Condition'\r\n                                    label='Condition'\r\n                                    onChange={onChange}\r\n                                    name=\"condition\"\r\n                                    control='select'\r\n                                    value={values.condition}\r\n                                >\r\n                                    <option value='new'>New</option>\r\n                                    <option value='used'>Used</option>\r\n                                </Form.Field>\r\n                            </Form.Group>\r\n                            <Form.Input\r\n                                fluid\r\n                                iconPosition='left'\r\n                                placeholder='Item Description'\r\n                                label='Description'\r\n                                control={TextArea}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                onChange={onChange}\r\n\r\n                            />\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Rp'\r\n                                    label='Price'\r\n                                    value={values.price}\r\n                                    name=\"price\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Amount Item'\r\n                                    label='Amount Item'\r\n                                    value={values.stock}\r\n                                    name=\"stock\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={100}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='kg'\r\n                                    label='Weight'\r\n                                    value={parseInt(values.weight)}\r\n                                    name=\"weight\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={10}\r\n                                    min={1}\r\n\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Length'\r\n                                    value={values.length}\r\n                                    name=\"length\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Width'\r\n                                    value={values.width}\r\n                                    name=\"width\"\r\n                                    type=\"number\"\r\n                                    max={1000}\r\n                                    min={1}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Height'\r\n                                    value={values.height}\r\n                                    name=\"height\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                size='small'\r\n                            >\r\n                                Save Item\r\n                            </Button>\r\n                        </Form>\r\n                        {showMessage()}\r\n                    </Card.Content>\r\n                </Card>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst ADD_ITEM_MUTATION = gql`\r\n  mutation addItem(\r\n    $name: String!\r\n    $price: Int!\r\n    $stock: Int!\r\n    $category: String!\r\n    $condition: String!\r\n    $weight: Int!\r\n    $description: String!\r\n    $length: Int!\r\n    $width: Int!\r\n    $height: Int!\r\n  ) {\r\n    addItem(addItemInput:{\r\n        name: $name,\r\n        price: $price,\r\n        stock: $stock,\r\n        category: $category,\r\n        condition: $condition,\r\n        weight: $weight,\r\n        description: $description\r\n        dimension: {\r\n            length: $length,\r\n            width: $width\r\n            height: $height\r\n        },\r\n        images: [{\r\n            downloadUrl:\"\"\r\n        }]\r\n    }){\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        category\r\n        condition\r\n        weight\r\n        description\r\n        dimension {\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images {\r\n            downloadUrl\r\n        }\r\n        createdAt\r\n    }\r\n    }\r\n  \r\n`\r\n\r\nexport default AddItem","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js",["263","264"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction ItemTransactionCard({ props, contextRef, item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const [addToCart] = useMutation(ADD_TO_CART_MUTATION, {\r\n        variables: { itemId: item.id, amountItem: amountItem },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: [result.data.addCartItem, ...data.getUserCartItems]\r\n                }\r\n            })\r\n\r\n            const cartItem = proxy.readQuery({\r\n                query: FETCH_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_CART_QUERY,\r\n                data: {\r\n                    getUserCartItem: cartItem.getUserCartItem\r\n                }\r\n            })\r\n\r\n            \r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n        },\r\n    })\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    console.log(visible)\r\n\r\n    function addItemToCart() {\r\n        // refetch()\r\n        addToCart()\r\n        setVisible(true)\r\n        window.location.href='/shop'\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <h1>loading...</h1>\r\n    )\r\n    if (!loading) {\r\n        itemMarkup = (\r\n            <>\r\n                <Sticky context={contextRef} offset={130}>\r\n                    <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content>\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                        <Icon name=\"angle down\" />\r\n                                    </List.Content>\r\n                                    <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"minus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                disabled={inCartAmount + amountItem >= item.stock}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"plus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                    </List>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Content floated='left' verticalAlign=\"middle\">\r\n                                        <Header as=\"h5\">Sub Total</Header>\r\n                                    </List.Content>\r\n                                    <List.Content floated='right'>\r\n                                        <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                    </List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n\r\n                                </List.Item>\r\n                            </List>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <div className='ui two buttons'>\r\n                                <Button animated='fade'>\r\n                                    <Button.Content visible>Buy</Button.Content>\r\n                                    <Button.Content hidden floated='left' style={{ borderRadius: 8, marginRight: 2 }}>\r\n                                        Checkout Now!\r\n                            </Button.Content>\r\n                                </Button>\r\n                                <Button color=\"teal\" animated='vertical' onClick={addItemToCart} disabled={inCartAmount === item.stock}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"cart arrow down\" />\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                        Add to Cart\r\n                            </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                            <div className='ui two buttons' style={{ marginTop: 8, marginLeft: 2 }}>\r\n                                <Button animated>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"chat\" />{\" Chat\"}\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                                        Go to Chat?\r\n                            </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                        </Card.Content>\r\n                    </Card>\r\n                    {visible ? (\r\n                        <Message\r\n                            positive\r\n                            onDismiss={handleDismiss}\r\n                            header='Added to cart!'\r\n                            content='Open cart menu for details.'\r\n                            style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                        />\r\n                    ) : (<div></div>)\r\n                    }\r\n\r\n                </Sticky>\r\n            </>\r\n        )\r\n    }\r\n    return itemMarkup\r\n}\r\n\r\nconst ADD_TO_CART_MUTATION = gql`\r\n    mutation addCartItem($itemId:ID!, $amountItem: Int!){\r\n        addCartItem(itemId: $itemId, note:\"\", amountItem:$amountItem)  {\r\n            note\r\n            amountItem\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default ItemTransactionCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js",["265"],"import React from 'react';\r\nimport { Item, Container, Rating, Label, List, Image } from 'semantic-ui-react';\r\nimport 'swiper/swiper.scss';\r\n\r\nfunction ItemReviewsCard({ reviews }) {\r\n  return (\r\n    <Container>\r\n      <Item.Group divided>\r\n        {reviews.map((review, index) => (\r\n          <Item>\r\n            <Item.Image size=\"small\" src={review.user.buyer.avatar} />\r\n            <Item.Content>\r\n              <Item.Header as='a'>\r\n                <Rating disabled maxRating={5} defaultRating={review.score} icon='star' size='mini' />\r\n              </Item.Header>\r\n              <Item.Meta>\r\n                <span className='cinema'>{review.body}</span>\r\n              </Item.Meta>\r\n              <List horizontal>\r\n                {review.images.map((image, index) => (\r\n                  <Image src={image.downloadUrl} style={{ width: 60, height: 60 }} />\r\n                ))}\r\n              </List>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n\r\n    </Container>\r\n\r\n  )\r\n}\r\nexport default ItemReviewsCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ChatFloatingButton.js",["266"],"import React, { useState, useContext } from 'react';\r\nimport { Icon, Transition, Segment, Grid, Container } from 'semantic-ui-react';\r\nimport { AuthContext } from '../context/auth';\r\nimport ChatFloatingCard from './ChatFloatingCard';\r\n\r\nfunction ChatFloatingButton() {\r\n    const [ visible, setVisible ] = useState(true)\r\n    const toggleVisibility = () => {setVisible(!visible)}\r\n    const { user } = useContext(AuthContext);\r\n    \r\n    const style = {\r\n        cursor: 'pointer',\r\n        borderRadius: 26,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    };\r\n\r\n    const cardStyle = {\r\n        width:560,\r\n        height:390,\r\n        borderRadius: 12,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000\r\n    };\r\n\r\n    const spanStyle = { fontSize: 14, fontWeight: 'bold'};\r\n\r\n    let chatFloatingMarkup  = (<br/>)\r\n    if (user !== null) {\r\n        chatFloatingMarkup = ( \r\n            <Container>\r\n                <Transition visible={visible} animation='scale' duration={500}>\r\n                    <Segment onClick={toggleVisibility} floated=\"right\" raised=\"true\" style={style}>\r\n                        <Icon color=\"teal\" size=\"large\" name=\"discussions\"/>\r\n                        <span style={spanStyle}>Chat</span>\r\n                    </Segment>\r\n                </Transition>\r\n                <Transition visible={!visible} animation='scale' duration={500}>\r\n                    <Segment onClick={toggleVisibility} style={cardStyle}>\r\n                        <ChatFloatingCard />\r\n                    </Segment>\r\n                </Transition>\r\n            </Container>\r\n            )\r\n    }\r\n    return chatFloatingMarkup;\r\n}\r\nexport default ChatFloatingButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js",["267"],"import React from 'react';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport ItemCartCard from '../components/ItemCartCard';\r\n\r\n\r\nfunction CartCard({ cartItem }) {\r\n\r\n    console.log(cartItem)\r\n\r\n    \r\n    // console.log(id)\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content>\r\n                <Checkbox\r\n                    label={cartItem[0].item.user.seller.username}\r\n                    style={{ fontWeight: 1000 }}\r\n                />\r\n            </Card.Content>\r\n            {cartItem &&\r\n                cartItem.map((item) => (\r\n                    <ItemCartCard item={item}></ItemCartCard>\r\n                ))}\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\n\r\nexport default CartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js",["268","269","270","271"],"import React, { useState } from 'react';\r\nimport { Card, Grid, Form, Checkbox, Image, Button, Icon, List, Input } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\nfunction ItemCartCard({ item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(item.amountItem)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    console.log(item.item.stock)\r\n\r\n    console.log(item.name)\r\n\r\n    const [deleteItemCart] = useMutation(DELETE_CART_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            // TODO: remove post cache\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: data.getUserCartItems.filter(cart => cart.id !== item.id)\r\n                }\r\n            })\r\n        },\r\n        variables: { cartId: item.id }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card.Content>\r\n                <Grid doubling>\r\n                    <Grid.Column width={1} verticalAlign='middle'></Grid.Column>\r\n\r\n                    <Grid.Column width={2} verticalAlign=\"middle\" style={{ padding: 5 }} >\r\n                        <Image\r\n                            fluid\r\n                            centered\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            as={Link} to={`/items/${item.item.id}`}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} style={{ marginTop: 5 }}>\r\n                        <Grid.Row><h4 >{item.item.name}</h4></Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <h4 style={{ color: 'teal' }}>Rp{item.item.price}</h4>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <Grid>\r\n                                <Grid.Column width={10}>\r\n                                    <Form size=\"small\">\r\n                                        <Form.Group>\r\n                                            <Form.Input\r\n                                                placeholder='Add Notes'\r\n                                                name='notes'\r\n                                            // value={notes}\r\n                                            // onChange={this.handleChange}\r\n                                            />\r\n                                            {/* <Form.Button size=\"mini\" content='Submit' /> */}\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={6}>\r\n                                    <Icon onClick={deleteItemCart} size=\"large\" color=\"grey\" name=\"trash\" style={{ marginRight: 40 }}></Icon>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem === 1}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"minus\"\r\n                                            />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"plus\"\r\n                                                disabled={amountItem >= item.item.stock}\r\n                                            />\r\n                                        </List.Item>\r\n                                        {/* <List.Item>{`Stok  ${item.stock}`}</List.Item> */}\r\n                                    </List>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n        </>\r\n    );\r\n}\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\nexport default ItemCartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js",["272","273"],"import React, { useState } from 'react';\r\nimport { Card, Sticky, Grid, Divider, Button, List } from 'semantic-ui-react';\r\n\r\nfunction ItemSummaryCard({ contextRef }) {\r\n    return (\r\n        <Sticky context={contextRef} offset={130}>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shopping Summary\" />\r\n                <Card.Content>\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                            <List.Content floated='right'>Rp100.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item (x2)</List.Content>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp200.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}><h4>Sub Total</h4></List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Button fluid color=\"teal\">Pay</Button>\r\n                </Card.Content>\r\n            </Card>\r\n        </Sticky>\r\n    )\r\n}\r\nexport default ItemSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js",["274","275","276","277","278"],"import React, { useState } from 'react';\r\nimport { Grid, Rating, Header, List, Progress, Icon, Item, Container } from 'semantic-ui-react';\r\nimport ProgressBar from './ProgressBar'\r\n\r\nfunction ReviewSummaryCard({ item }) {\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const progressStyle = {\r\n        backgroundColor:'#FEFEFE',\r\n        marginBottom: 10\r\n    }\r\n\r\n    const rateStars = [{\r\n        star: 5,\r\n        amountReviewers: 10\r\n    },{\r\n        star: 4,\r\n        amountReviewers: 5\r\n    },{\r\n        star: 3,\r\n        amountReviewers: 2\r\n    },{\r\n        star: 2,\r\n        amountReviewers: 0\r\n    },{\r\n        star: 1,\r\n        amountReviewers: 0\r\n    }]\r\n\r\n    let totalReviewer = 0;\r\n    rateStars.map((rate) => totalReviewer += rate.amountReviewers)\r\n    \r\n\r\n    let markup = (<Grid>\r\n        <Grid.Column width={8}>\r\n            <Grid>\r\n            <Grid.Row>\r\n                <Container>\r\n                    <Header as=\"h4\">ULASAN(145)</Header>\r\n                    <p className='cinema'>Case Xiaomi Poco X3 NFC Nillkin CamShield - Hitam</p>\r\n                </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={6} style={{padding: 0, marginTop:20}}>\r\n                    <List>\r\n                        <span style={{fontSize:60, fontStyle:'bold'}}>4.9</span>\r\n                        <span>/5</span>\r\n                        <List.Item>\r\n                            <Rating disabled maxRating={5} defaultRating={4} icon='star' size='large' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <span style={{}}>(145) Ulasan</span>\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} style={{ paddingRight: 0 }}>\r\n                    <List>\r\n                        {rateStars.map((rate) => \r\n                            (<List.Item>\r\n                            <Icon style={{ color: 'gold' }} name=\"star\"/>\r\n                            {` ${rate.star}`}\r\n                        </List.Item>)\r\n\r\n                        )}\r\n                       \r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5} style={{ padding: 0, marginTop: 4 }}>\r\n                    <List>\r\n                        {rateStars.map((rate, index) => (\r\n                        <List.Item>\r\n                            <ProgressBar key={index} bgcolor={\"#00B5AD\"} completed={rate.amountReviewers / totalReviewer * 100}/>\r\n                            {/* <Progress size=\"tiny\" percent={rate.amountReviewers / totalReviewer * 100} success style={progressStyle}/> */}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <List>\r\n                        {rateStars.map((rate) => (\r\n                        <List.Item>\r\n                            {rate.amountReviewers}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n        </Grid.Column>\r\n    </Grid>);\r\n    return markup\r\n}\r\nexport default ReviewSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js",["279"],"import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n    const { bgcolor, completed } = props;\r\n  \r\n    const containerStyles = {\r\n      height: 8,\r\n      width: '100%',\r\n      backgroundColor: \"#e0e0de\",\r\n      borderRadius: 50,\r\n      marginBottom: 8\r\n    }\r\n  \r\n    const fillerStyles = {\r\n      height: '100%',\r\n      width: `${completed}%`,\r\n      backgroundColor: bgcolor,\r\n      borderRadius: 'inherit',\r\n      textAlign: 'right'\r\n    }\r\n  \r\n    const labelStyles = {\r\n      padding: 5,\r\n      color: 'white',\r\n      fontWeight: 'bold'\r\n    }\r\n  \r\n    return (\r\n      <div style={containerStyles}>\r\n        <div style={fillerStyles}>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ProgressBar;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ChatFloatingCard.js",["280","281","282","283","284","285","286","287"],"import React from 'react';\r\nimport { Icon, Grid, Segment, List, Item, Image, Card, Feed } from 'semantic-ui-react';\r\n\r\nfunction ChatFloatingCard() {\r\n    const topLeftBar = {\r\n        margin: 0,\r\n        borderTopLeftRadius: 12,\r\n        borderTopRightRadius: 0,\r\n        borderBottomLeftRadius: 0,\r\n        borderBottomRightRadius: 0\r\n    }\r\n\r\n    const topRightBar = {\r\n        borderTopLeftRadius: 0,\r\n        borderTopRightRadius: 12,\r\n        borderBottomLeftRadius: 0,\r\n        borderBottomRightRadius: 0\r\n    }\r\n\r\n    const leftContent = {\r\n        padding: 0,\r\n        margin: 0,\r\n        overflow: 'auto',\r\n        maxHeight: 342,\r\n        borderTopLeftRadius: 0,\r\n        borderTopRightRadius: 0,\r\n        borderBottomLeftRadius: 12,\r\n        borderBottomRightRadius: 0\r\n    }\r\n\r\n    return (\r\n        <Grid >\r\n            <Grid.Column width={5} style={{ padding: 0}}>\r\n                <Segment style={topLeftBar}>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Content style={{ fontWeight: 'bold'}}>Chat</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Segment>\r\n                <Segment style={leftContent}>\r\n                    <Item.Group>\r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                       \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                        <Item style={{ margin: 0 }}>\r\n                            <Card onClick={() => {}} style={{ borderRadius: 0, margin: 0, paddingTop: 8, paddingBottom: 8, paddingLeft: 4, paddingRight: 4 }}>\r\n                                <Feed>\r\n                                    <Feed.Event>\r\n                                        <Feed.Label>\r\n                                            <img src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                                        </Feed.Label>\r\n                                        <Feed.Content>\r\n                                            <Feed.Summary>\r\n                                                <Feed.User>Elliot Fu</Feed.User>\r\n                                            </Feed.Summary>\r\n                                        </Feed.Content>\r\n                                    </Feed.Event>\r\n                                </Feed>\r\n                            </Card>\r\n                        </Item> \r\n                       \r\n                    </Item.Group>\r\n                </Segment>\r\n            </Grid.Column>\r\n            <Grid.Column width={11} style={{ padding: 0}}>\r\n                <Segment style={topRightBar} >\r\n                    {/* <Icon name='angle down' style={{ padding: 8, float: 'right', cursor:'pointer' }}/> */}\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>\r\n                                <Icon name=\"angle down\" style={{ cursor:'pointer' }}/>\r\n                            </List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='mini' src='https://react.semantic-ui.com/images/wireframe/image.png' />\r\n                        <Item.Content>\r\n                            <Item.Header>Header</Item.Header>\r\n                            <Item.Meta>Description</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item> \r\n                    <Item>\r\n                        <Item.Image circular size='mini' src='https://react.semantic-ui.com/images/wireframe/image.png' />\r\n                        <Item.Content>\r\n                            <Item.Header>Header</Item.Header>\r\n                            <Item.Meta>Description</Item.Meta>\r\n                        </Item.Content>\r\n                    </Item> \r\n                </Item.Group>\r\n            </Grid.Column>\r\n       \r\n        </Grid>\r\n        );\r\n}\r\nexport default ChatFloatingCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js",["288","289","290","291"],"D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBarMyOrders.js",["292","293"],"D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js",["294"],{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","severity":1,"message":"300","line":11,"column":11,"nodeType":"301","messageId":"302","endLine":11,"endColumn":15},{"ruleId":"299","severity":1,"message":"303","line":12,"column":26,"nodeType":"301","messageId":"302","endLine":12,"endColumn":33},{"ruleId":"299","severity":1,"message":"304","line":2,"column":47,"nodeType":"301","messageId":"302","endLine":2,"endColumn":54},{"ruleId":"299","severity":1,"message":"305","line":2,"column":44,"nodeType":"301","messageId":"302","endLine":2,"endColumn":49},{"ruleId":"299","severity":1,"message":"305","line":4,"column":33,"nodeType":"301","messageId":"302","endLine":4,"endColumn":38},{"ruleId":"299","severity":1,"message":"305","line":5,"column":31,"nodeType":"301","messageId":"302","endLine":5,"endColumn":36},{"ruleId":"299","severity":1,"message":"306","line":23,"column":11,"nodeType":"301","messageId":"302","endLine":23,"endColumn":26},{"ruleId":"299","severity":1,"message":"307","line":22,"column":12,"nodeType":"301","messageId":"302","endLine":22,"endColumn":18},{"ruleId":"299","severity":1,"message":"308","line":2,"column":30,"nodeType":"301","messageId":"302","endLine":2,"endColumn":40},{"ruleId":"309","severity":1,"message":"310","line":41,"column":30,"nodeType":"311","messageId":"312","endLine":41,"endColumn":39},{"ruleId":"299","severity":1,"message":"300","line":10,"column":11,"nodeType":"301","messageId":"302","endLine":10,"endColumn":15},{"ruleId":"313","severity":1,"message":"314","line":20,"column":30,"nodeType":"315","messageId":"316","endLine":20,"endColumn":32},{"ruleId":"299","severity":1,"message":"317","line":4,"column":20,"nodeType":"301","messageId":"302","endLine":4,"endColumn":31},{"ruleId":"299","severity":1,"message":"318","line":2,"column":28,"nodeType":"301","messageId":"302","endLine":2,"endColumn":44},{"ruleId":"299","severity":1,"message":"319","line":4,"column":21,"nodeType":"301","messageId":"302","endLine":4,"endColumn":25},{"ruleId":"299","severity":1,"message":"320","line":19,"column":11,"nodeType":"301","messageId":"302","endLine":19,"endColumn":18},{"ruleId":"321","severity":1,"message":"322","line":62,"column":33,"nodeType":"323","messageId":"316","endLine":62,"endColumn":36},{"ruleId":"321","severity":1,"message":"322","line":67,"column":27,"nodeType":"323","messageId":"316","endLine":67,"endColumn":30},{"ruleId":"299","severity":1,"message":"324","line":2,"column":45,"nodeType":"301","messageId":"302","endLine":2,"endColumn":50},{"ruleId":"299","severity":1,"message":"325","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":14},{"ruleId":"299","severity":1,"message":"300","line":9,"column":13,"nodeType":"301","messageId":"302","endLine":9,"endColumn":17},{"ruleId":"299","severity":1,"message":"326","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":27},{"ruleId":"299","severity":1,"message":"327","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":21},{"ruleId":"299","severity":1,"message":"328","line":80,"column":11,"nodeType":"301","messageId":"302","endLine":80,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":125,"column":112,"nodeType":"331","endLine":125,"endColumn":122},{"ruleId":"299","severity":1,"message":"307","line":15,"column":12,"nodeType":"301","messageId":"302","endLine":15,"endColumn":18},{"ruleId":"299","severity":1,"message":"303","line":51,"column":42,"nodeType":"301","messageId":"302","endLine":51,"endColumn":49},{"ruleId":"299","severity":1,"message":"332","line":2,"column":35,"nodeType":"301","messageId":"302","endLine":2,"endColumn":40},{"ruleId":"299","severity":1,"message":"333","line":2,"column":37,"nodeType":"301","messageId":"302","endLine":2,"endColumn":41},{"ruleId":"299","severity":1,"message":"334","line":30,"column":7,"nodeType":"301","messageId":"302","endLine":30,"endColumn":32},{"ruleId":"299","severity":1,"message":"335","line":2,"column":28,"nodeType":"301","messageId":"302","endLine":2,"endColumn":36},{"ruleId":"299","severity":1,"message":"307","line":13,"column":12,"nodeType":"301","messageId":"302","endLine":13,"endColumn":18},{"ruleId":"299","severity":1,"message":"336","line":13,"column":20,"nodeType":"301","messageId":"302","endLine":13,"endColumn":29},{"ruleId":"329","severity":1,"message":"330","line":79,"column":49,"nodeType":"331","endLine":79,"endColumn":75},{"ruleId":"299","severity":1,"message":"337","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":25},{"ruleId":"299","severity":1,"message":"333","line":2,"column":24,"nodeType":"301","messageId":"302","endLine":2,"endColumn":28},{"ruleId":"299","severity":1,"message":"338","line":2,"column":38,"nodeType":"301","messageId":"302","endLine":2,"endColumn":46},{"ruleId":"299","severity":1,"message":"339","line":2,"column":54,"nodeType":"301","messageId":"302","endLine":2,"endColumn":58},{"ruleId":"299","severity":1,"message":"340","line":6,"column":12,"nodeType":"301","messageId":"302","endLine":6,"endColumn":22},{"ruleId":"299","severity":1,"message":"341","line":6,"column":24,"nodeType":"301","messageId":"302","endLine":6,"endColumn":37},{"ruleId":"299","severity":1,"message":"342","line":7,"column":11,"nodeType":"301","messageId":"302","endLine":7,"endColumn":24},{"ruleId":"299","severity":1,"message":"343","line":22,"column":11,"nodeType":"301","messageId":"302","endLine":22,"endColumn":22},{"ruleId":"299","severity":1,"message":"324","line":2,"column":43,"nodeType":"301","messageId":"302","endLine":2,"endColumn":48},{"ruleId":"344","severity":1,"message":"345","line":48,"column":45,"nodeType":"346","endLine":48,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":65,"column":45,"nodeType":"346","endLine":65,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":81,"column":45,"nodeType":"346","endLine":81,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":97,"column":45,"nodeType":"346","endLine":97,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":113,"column":45,"nodeType":"346","endLine":113,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":129,"column":45,"nodeType":"346","endLine":129,"endColumn":119},{"ruleId":"344","severity":1,"message":"345","line":145,"column":45,"nodeType":"346","endLine":145,"endColumn":119},{"ruleId":"299","severity":1,"message":"347","line":2,"column":24,"nodeType":"301","messageId":"302","endLine":2,"endColumn":31},{"ruleId":"299","severity":1,"message":"325","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":14},{"ruleId":"299","severity":1,"message":"348","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":22},{"ruleId":"299","severity":1,"message":"349","line":11,"column":11,"nodeType":"301","messageId":"302","endLine":11,"endColumn":18},{"ruleId":"299","severity":1,"message":"347","line":2,"column":24,"nodeType":"301","messageId":"302","endLine":2,"endColumn":31},{"ruleId":"299","severity":1,"message":"325","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":14},{"ruleId":"299","severity":1,"message":"337","line":1,"column":17,"nodeType":"301","messageId":"302","endLine":1,"endColumn":25},"no-native-reassign",["350"],"no-negated-in-lhs",["351"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'refetch' is assigned a value but never used.","'Message' is defined but never used.","'Popup' is defined but never used.","'handleItemHover' is assigned a value but never used.","'errors' is assigned a value but never used.","'Transition' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useMutation' is defined but never used.","'FETCH_CART_QUERY' is defined but never used.","'Rail' is defined but never used.","'loading' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Image' is defined but never used.","'Link' is defined but never used.","'useContext' is defined but never used.","'AuthContext' is defined but never used.","'options' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Label' is defined but never used.","'Grid' is defined but never used.","'DELETE_CART_ITEM_MUTATION' is assigned a value but never used.","'Checkbox' is defined but never used.","'setErrors' is assigned a value but never used.","'useState' is defined but never used.","'Progress' is defined but never used.","'Item' is defined but never used.","'amountItem' is assigned a value but never used.","'setAmountItem' is assigned a value but never used.","'progressStyle' is assigned a value but never used.","'labelStyles' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Segment' is defined but never used.","'NavBarMyOrders' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]