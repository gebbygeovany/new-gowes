[{"D:\\SKRIPSI\\gowes\\client\\src\\index.js":"1","D:\\SKRIPSI\\gowes\\client\\src\\App.js":"2","D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js":"3","D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js":"4","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js":"5","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js":"6","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js":"7","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js":"8","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js":"9","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js":"10","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js":"11","D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js":"12","D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js":"13","D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js":"14","D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js":"15","D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js":"16","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js":"17","D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js":"18","D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js":"19","D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js":"20","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js":"21","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js":"22","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js":"23","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js":"24","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js":"25","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js":"26","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js":"27","D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js":"28","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js":"29","D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js":"30","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js":"31","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js":"32","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js":"33","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js":"34","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js":"35","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js":"36","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js":"37","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js":"38","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js":"39","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js":"40","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js":"41","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js":"42","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js":"43","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js":"44","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js":"45","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js":"46","D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js":"47","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemMyOrders.js":"48","D:\\SKRIPSI\\gowes\\client\\src\\components\\ManageItemSticky.js":"49","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteItemButton.js":"50","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SellerProfile.js":"51","D:\\SKRIPSI\\gowes\\client\\src\\components\\SideBarSellerProfile.js":"52","D:\\SKRIPSI\\gowes\\client\\src\\pages\\EditItem.js":"53","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingButton.js":"54","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingCard.js":"55","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Checkout.js":"56","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCheckout.js":"57","D:\\SKRIPSI\\gowes\\client\\src\\components\\CheckoutCard.js":"58","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCheckoutCard.js":"59","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Register.js":"60","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Login.js":"61","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\MessageListCard.js":"62","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatListCard.js":"63","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js":"64","E:\\node-project\\new-gowes\\client\\src\\index.js":"65","E:\\node-project\\new-gowes\\client\\src\\reportWebVitals.js":"66","E:\\node-project\\new-gowes\\client\\src\\ApolloProvider.js":"67","E:\\node-project\\new-gowes\\client\\src\\App.js":"68","E:\\node-project\\new-gowes\\client\\src\\context\\auth.js":"69","E:\\node-project\\new-gowes\\client\\src\\util\\AuthRoute.js":"70","E:\\node-project\\new-gowes\\client\\src\\pages\\Event.js":"71","E:\\node-project\\new-gowes\\client\\src\\pages\\Home.js":"72","E:\\node-project\\new-gowes\\client\\src\\pages\\Bookmark.js":"73","E:\\node-project\\new-gowes\\client\\src\\pages\\SinglePost.js":"74","E:\\node-project\\new-gowes\\client\\src\\pages\\Cart.js":"75","E:\\node-project\\new-gowes\\client\\src\\pages\\MyStore.js":"76","E:\\node-project\\new-gowes\\client\\src\\pages\\ItemDetail.js":"77","E:\\node-project\\new-gowes\\client\\src\\pages\\Profile.js":"78","E:\\node-project\\new-gowes\\client\\src\\pages\\SellerProfile.js":"79","E:\\node-project\\new-gowes\\client\\src\\pages\\AddItem.js":"80","E:\\node-project\\new-gowes\\client\\src\\pages\\Checkout.js":"81","E:\\node-project\\new-gowes\\client\\src\\pages\\Authentication\\Login.js":"82","E:\\node-project\\new-gowes\\client\\src\\pages\\Authentication\\Register.js":"83","E:\\node-project\\new-gowes\\client\\src\\pages\\EditItem.js":"84","E:\\node-project\\new-gowes\\client\\src\\components\\Footer.js":"85","E:\\node-project\\new-gowes\\client\\src\\components\\EditMyStoreDetailsCard.js":"86","E:\\node-project\\new-gowes\\client\\src\\components\\EditProfileCard.js":"87","E:\\node-project\\new-gowes\\client\\src\\components\\NavBar.js":"88","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatFloatingButton.js":"89","E:\\node-project\\new-gowes\\client\\src\\components\\PostCard.js":"90","E:\\node-project\\new-gowes\\client\\src\\components\\PostForm.js":"91","E:\\node-project\\new-gowes\\client\\src\\components\\ShopCard.js":"92","E:\\node-project\\new-gowes\\client\\src\\components\\FilterBar.js":"93","E:\\node-project\\new-gowes\\client\\src\\util\\graphql.js":"94","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatFloatingCard.js":"95","E:\\node-project\\new-gowes\\client\\src\\components\\MyPopup.js":"96","E:\\node-project\\new-gowes\\client\\src\\util\\hooks.js":"97","E:\\node-project\\new-gowes\\client\\src\\components\\ItemSummaryCheckout.js":"98","E:\\node-project\\new-gowes\\client\\src\\components\\SideBarSellerProfile.js":"99","E:\\node-project\\new-gowes\\client\\src\\components\\CheckoutCard.js":"100","E:\\node-project\\new-gowes\\client\\src\\components\\MyOrders.js":"101","E:\\node-project\\new-gowes\\client\\src\\components\\ProfileCard.js":"102","E:\\node-project\\new-gowes\\client\\src\\components\\SidebarProfile.js":"103","E:\\node-project\\new-gowes\\client\\src\\firebase\\index.js":"104","E:\\node-project\\new-gowes\\client\\src\\components\\DeleteButton.js":"105","E:\\node-project\\new-gowes\\client\\src\\components\\BookmarkButton.js":"106","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\MessageListCard.js":"107","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatListCard.js":"108","E:\\node-project\\new-gowes\\client\\src\\components\\LikeButton.js":"109","E:\\node-project\\new-gowes\\client\\src\\components\\ItemCheckoutCard.js":"110","E:\\node-project\\new-gowes\\client\\src\\components\\CardMyOrders.js":"111","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js":"112","E:\\node-project\\new-gowes\\client\\src\\components\\ItemMyOrders.js":"113","E:\\node-project\\new-gowes\\client\\src\\components\\ReviewSummaryCard.js":"114","E:\\node-project\\new-gowes\\client\\src\\components\\ItemReviewsCard.js":"115","E:\\node-project\\new-gowes\\client\\src\\components\\ItemDetailCard.js":"116","E:\\node-project\\new-gowes\\client\\src\\components\\ItemImagesCard.js":"117","E:\\node-project\\new-gowes\\client\\src\\components\\ManageItemSticky.js":"118","E:\\node-project\\new-gowes\\client\\src\\components\\ItemTransactionCard.js":"119","E:\\node-project\\new-gowes\\client\\src\\components\\SidebarStore.js":"120","E:\\node-project\\new-gowes\\client\\src\\components\\MyStoreDetailsCard.js":"121","E:\\node-project\\new-gowes\\client\\src\\components\\MyItemList.js":"122","E:\\node-project\\new-gowes\\client\\src\\components\\CartCard.js":"123","E:\\node-project\\new-gowes\\client\\src\\components\\ItemSummaryCard.js":"124","E:\\node-project\\new-gowes\\client\\src\\components\\ProgressBar.js":"125","E:\\node-project\\new-gowes\\client\\src\\components\\DeleteItemButton.js":"126","E:\\node-project\\new-gowes\\client\\src\\components\\MyItemsCard.js":"127","E:\\node-project\\new-gowes\\client\\src\\components\\ItemCartCard.js":"128"},{"size":427,"mtime":1612157259343,"results":"129","hashOfConfig":"130"},{"size":3145,"mtime":1614084516075,"results":"131","hashOfConfig":"130"},{"size":362,"mtime":499162500000,"results":"132","hashOfConfig":"130"},{"size":1455,"mtime":1614166633204,"results":"133","hashOfConfig":"130"},{"size":1218,"mtime":1613621369554,"results":"134","hashOfConfig":"130"},{"size":6895,"mtime":1612790027966,"results":"135","hashOfConfig":"130"},{"size":2499,"mtime":1611655963169,"results":"136","hashOfConfig":"130"},{"size":1696,"mtime":1612449942839,"results":"137","hashOfConfig":"130"},{"size":2297,"mtime":1611655953679,"results":"138","hashOfConfig":"130"},{"size":1599,"mtime":1611829443284,"results":"139","hashOfConfig":"130"},{"size":208,"mtime":1612079807198,"results":"140","hashOfConfig":"130"},{"size":1492,"mtime":1612280407086,"results":"141","hashOfConfig":"130"},{"size":3311,"mtime":1614166633208,"results":"142","hashOfConfig":"130"},{"size":441,"mtime":1613742927062,"results":"143","hashOfConfig":"130"},{"size":436,"mtime":1611655804808,"results":"144","hashOfConfig":"130"},{"size":7210,"mtime":1613990849161,"results":"145","hashOfConfig":"130"},{"size":1354,"mtime":1611766150622,"results":"146","hashOfConfig":"130"},{"size":1048,"mtime":1612443513291,"results":"147","hashOfConfig":"130"},{"size":1531,"mtime":1613997612693,"results":"148","hashOfConfig":"130"},{"size":2703,"mtime":1613997612692,"results":"149","hashOfConfig":"130"},{"size":1109,"mtime":1611902913199,"results":"150","hashOfConfig":"130"},{"size":2067,"mtime":1613724527722,"results":"151","hashOfConfig":"130"},{"size":1510,"mtime":1613439524602,"results":"152","hashOfConfig":"130"},{"size":1107,"mtime":1613392640988,"results":"153","hashOfConfig":"130"},{"size":1344,"mtime":1614003876964,"results":"154","hashOfConfig":"130"},{"size":6591,"mtime":1613438950726,"results":"155","hashOfConfig":"130"},{"size":573,"mtime":1612161104076,"results":"156","hashOfConfig":"130"},{"size":1202,"mtime":1612606427780,"results":"157","hashOfConfig":"130"},{"size":1350,"mtime":1613624051364,"results":"158","hashOfConfig":"130"},{"size":2474,"mtime":1613481642323,"results":"159","hashOfConfig":"130"},{"size":7429,"mtime":1613439030060,"results":"160","hashOfConfig":"130"},{"size":4031,"mtime":1613618727840,"results":"161","hashOfConfig":"130"},{"size":10997,"mtime":1613438971042,"results":"162","hashOfConfig":"130"},{"size":3792,"mtime":1613484930583,"results":"163","hashOfConfig":"130"},{"size":1813,"mtime":1613480664718,"results":"164","hashOfConfig":"130"},{"size":11658,"mtime":1613485042361,"results":"165","hashOfConfig":"130"},{"size":8040,"mtime":1613721160234,"results":"166","hashOfConfig":"130"},{"size":2312,"mtime":1613615501343,"results":"167","hashOfConfig":"130"},{"size":1050,"mtime":1612491792427,"results":"168","hashOfConfig":"130"},{"size":1051,"mtime":1612619475663,"results":"169","hashOfConfig":"130"},{"size":925,"mtime":1613988334683,"results":"170","hashOfConfig":"130"},{"size":5332,"mtime":1613988508963,"results":"171","hashOfConfig":"130"},{"size":1802,"mtime":1613989447649,"results":"172","hashOfConfig":"130"},{"size":3308,"mtime":1612620486594,"results":"173","hashOfConfig":"130"},{"size":730,"mtime":1612619440542,"results":"174","hashOfConfig":"130"},{"size":5154,"mtime":1614007485076,"results":"175","hashOfConfig":"130"},{"size":1474,"mtime":1614007582708,"results":"176","hashOfConfig":"130"},{"size":1421,"mtime":1613398552991,"results":"177","hashOfConfig":"130"},{"size":5804,"mtime":1613745708464,"results":"178","hashOfConfig":"130"},{"size":2335,"mtime":1613721690529,"results":"179","hashOfConfig":"130"},{"size":2768,"mtime":1613654454970,"results":"180","hashOfConfig":"130"},{"size":2375,"mtime":1613652009075,"results":"181","hashOfConfig":"130"},{"size":13195,"mtime":1613746212534,"results":"182","hashOfConfig":"130"},{"size":1996,"mtime":1613910413954,"results":"183","hashOfConfig":"130"},{"size":5968,"mtime":1614239327444,"results":"184","hashOfConfig":"130"},{"size":3097,"mtime":1613989575210,"results":"185","hashOfConfig":"130"},{"size":2834,"mtime":1613989346118,"results":"186","hashOfConfig":"130"},{"size":835,"mtime":1613998182056,"results":"187","hashOfConfig":"130"},{"size":2466,"mtime":1613989489316,"results":"188","hashOfConfig":"130"},{"size":4504,"mtime":1614084684779,"results":"189","hashOfConfig":"130"},{"size":3476,"mtime":1614084678748,"results":"190","hashOfConfig":"130"},{"size":4278,"mtime":1614241460796,"results":"191","hashOfConfig":"130"},{"size":2408,"mtime":1614239435874,"results":"192","hashOfConfig":"130"},{"size":4186,"mtime":1614241449039,"results":"193","hashOfConfig":"130"},{"size":436,"mtime":1612007673164,"results":"194","hashOfConfig":"195"},{"size":375,"mtime":1612007673165,"results":"196","hashOfConfig":"195"},{"size":1463,"mtime":1614518139143,"results":"197","hashOfConfig":"195"},{"size":3497,"mtime":1614265518265,"results":"198","hashOfConfig":"195"},{"size":1492,"mtime":1612007673164,"results":"199","hashOfConfig":"195"},{"size":436,"mtime":1612007673166,"results":"200","hashOfConfig":"195"},{"size":1354,"mtime":1612007673164,"results":"201","hashOfConfig":"195"},{"size":1217,"mtime":1614517948061,"results":"202","hashOfConfig":"195"},{"size":1510,"mtime":1613612345289,"results":"203","hashOfConfig":"195"},{"size":6895,"mtime":1612007673165,"results":"204","hashOfConfig":"195"},{"size":2067,"mtime":1613907033673,"results":"205","hashOfConfig":"195"},{"size":1202,"mtime":1614268697981,"results":"206","hashOfConfig":"195"},{"size":2537,"mtime":1614260950608,"results":"207","hashOfConfig":"195"},{"size":1107,"mtime":1613612345292,"results":"208","hashOfConfig":"195"},{"size":2768,"mtime":1613907033675,"results":"209","hashOfConfig":"195"},{"size":11658,"mtime":1613612345288,"results":"210","hashOfConfig":"195"},{"size":3097,"mtime":1613997557685,"results":"211","hashOfConfig":"195"},{"size":3476,"mtime":1614142575856,"results":"212","hashOfConfig":"195"},{"size":4504,"mtime":1614142575853,"results":"213","hashOfConfig":"195"},{"size":13195,"mtime":1613907033674,"results":"214","hashOfConfig":"195"},{"size":1048,"mtime":1612354266511,"results":"215","hashOfConfig":"195"},{"size":7429,"mtime":1613612345273,"results":"216","hashOfConfig":"195"},{"size":10997,"mtime":1613612345274,"results":"217","hashOfConfig":"195"},{"size":7201,"mtime":1614518634766,"results":"218","hashOfConfig":"195"},{"size":2097,"mtime":1614265514339,"results":"219","hashOfConfig":"195"},{"size":1696,"mtime":1612007673163,"results":"220","hashOfConfig":"195"},{"size":2499,"mtime":1612025688558,"results":"221","hashOfConfig":"195"},{"size":1531,"mtime":1613994406852,"results":"222","hashOfConfig":"195"},{"size":1109,"mtime":1612007673162,"results":"223","hashOfConfig":"195"},{"size":3551,"mtime":1614255798521,"results":"224","hashOfConfig":"195"},{"size":6074,"mtime":1614424649309,"results":"225","hashOfConfig":"195"},{"size":208,"mtime":1612431224881,"results":"226","hashOfConfig":"195"},{"size":441,"mtime":1612259651521,"results":"227","hashOfConfig":"195"},{"size":2834,"mtime":1613997557680,"results":"228","hashOfConfig":"195"},{"size":2375,"mtime":1613907033671,"results":"229","hashOfConfig":"195"},{"size":835,"mtime":1613997557675,"results":"230","hashOfConfig":"195"},{"size":5154,"mtime":1614142575822,"results":"231","hashOfConfig":"195"},{"size":6591,"mtime":1613612345285,"results":"232","hashOfConfig":"195"},{"size":1344,"mtime":1614142575823,"results":"233","hashOfConfig":"195"},{"size":573,"mtime":1612113367449,"results":"234","hashOfConfig":"195"},{"size":2297,"mtime":1612007673162,"results":"235","hashOfConfig":"195"},{"size":2703,"mtime":1613994387440,"results":"236","hashOfConfig":"195"},{"size":3998,"mtime":1614591425089,"results":"237","hashOfConfig":"195"},{"size":2408,"mtime":1614424662501,"results":"238","hashOfConfig":"195"},{"size":1599,"mtime":1612284341880,"results":"239","hashOfConfig":"195"},{"size":2466,"mtime":1613997557676,"results":"240","hashOfConfig":"195"},{"size":1474,"mtime":1614142575820,"results":"241","hashOfConfig":"195"},{"size":4241,"mtime":1614256941906,"results":"242","hashOfConfig":"195"},{"size":1421,"mtime":1613612345276,"results":"243","hashOfConfig":"195"},{"size":3308,"mtime":1612625085066,"results":"244","hashOfConfig":"195"},{"size":1051,"mtime":1612625085063,"results":"245","hashOfConfig":"195"},{"size":2312,"mtime":1613707153129,"results":"246","hashOfConfig":"195"},{"size":1050,"mtime":1614424635457,"results":"247","hashOfConfig":"195"},{"size":5804,"mtime":1613907033669,"results":"248","hashOfConfig":"195"},{"size":8087,"mtime":1614259958719,"results":"249","hashOfConfig":"195"},{"size":1350,"mtime":1613612345287,"results":"250","hashOfConfig":"195"},{"size":4031,"mtime":1613612345282,"results":"251","hashOfConfig":"195"},{"size":3792,"mtime":1613612345279,"results":"252","hashOfConfig":"195"},{"size":925,"mtime":1612872517656,"results":"253","hashOfConfig":"195"},{"size":1802,"mtime":1613997557679,"results":"254","hashOfConfig":"195"},{"size":730,"mtime":1612547498400,"results":"255","hashOfConfig":"195"},{"size":2335,"mtime":1613612345272,"results":"256","hashOfConfig":"195"},{"size":1813,"mtime":1613612345280,"results":"257","hashOfConfig":"195"},{"size":5332,"mtime":1612877836717,"results":"258","hashOfConfig":"195"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},"e97are",{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"261"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"261"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"261"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"261"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"261"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"261"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"261"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"261"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"261"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"261"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"261"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"261"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"261"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"261"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"261"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"261"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"261"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"261"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"261"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"261"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"261"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"261"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"261"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"261"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"261"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"261"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"261"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"261"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"261"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"261"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"261"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"261"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"261"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"261"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"261"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"261"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"261"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},"lh6mvl",{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"427"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"427"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"427"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"427"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"427"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"427"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"427"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"427"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"427"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"427"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"427"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"427"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"427"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"427"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"427"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"427"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"427"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"427"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"427"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"427"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"427"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"517","messages":"518","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"427"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"427"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"427"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"427"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"530"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"427"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"427"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"427"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"427"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"427"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"427"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"427"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"427"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"427"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"427"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"427"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"427"},"D:\\SKRIPSI\\gowes\\client\\src\\index.js",[],["562","563"],"D:\\SKRIPSI\\gowes\\client\\src\\App.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js",["564"],"import React from \"react\";\r\nimport App from \"./App\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { split, HttpLink } from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\n\r\nlet httpLink = createHttpLink({\r\n  uri: \"http://localhost:4000\",\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem(\"jwtToken\");\r\n  return {\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nhttpLink = authLink.concat(httpLink);\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://localhost:4000/graphql\",\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: {\r\n      Authorization: `Bearer ${localStorage.getItem(\"jwtToken\")}`,\r\n    },\r\n  },\r\n});\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App></App>\r\n  </ApolloProvider>\r\n);\r\n","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js",["565","566"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport FilterBar from '../components/FilterBar';\r\nimport { FETCH_ITEMS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data, refetch } = useQuery(FETCH_ITEMS_QUERY,)\r\n  const { getItems: items } = data ? data : []\r\n\r\n\r\n  console.log(items)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Row className=\"page-title\">\r\n        <FilterBar></FilterBar>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {!loading ? (\r\n          <>\r\n            <Transition.Group duration={1000}>\r\n              {items &&\r\n                items.map((item) => (\r\n                  <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                    <ShopCard item={item} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          </>\r\n        ) : (\r\n            <h1>Loading posts..</h1>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js",["567"],"import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Label, Image, Popup } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction PostCard({\r\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }}) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid style={{boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'}}>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n        <Button onClick={()=>console.log(likes)}>test</Button>\r\n\r\n        <MyPopup content=\"Comment On Post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"blue\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js",["568"],"import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button, Confirm, Popup } from 'semantic-ui-react'\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n\r\n    const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n    const [deletePostOrMutation] = useMutation(mutation, {\r\n        update(proxy, result) {\r\n            setConfirmOpen(false)\r\n            // TODO: remove post cache\r\n\r\n            if (!commentId) {\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                })\r\n\r\n                proxy.writeQuery({\r\n                    query: FETCH_POSTS_QUERY,\r\n                    data: {\r\n                        getPosts: data.getPosts.filter(p => p.id !== postId)\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n\r\n            if (callback) callback()\r\n        },\r\n        variables: { postId, commentId }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <MyPopup content={commentId ? \"Delete Comment\" : \"Delete Post\"}>\r\n                <Button\r\n                    as=\"div\"\r\n                    color=\"red\"\r\n                    floated=\"right\"\r\n                    onClick={() => setConfirmOpen(true)}\r\n                >\r\n                    <Icon name=\"trash\" style={{ margin: 0 }} />\r\n                </Button>\r\n            </MyPopup>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={deletePostOrMutation}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n    mutation deletePost($postId:ID!){\r\n        deletePost(postId: $postId)\r\n    }\r\n`\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation deleteComment($postId:ID!, $commentId:ID!){\r\n        deleteComment(postId: $postId, commentId: $commentId){\r\n            id\r\n            comments{\r\n                id\r\n                username\r\n                createdAt\r\n                body\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default DeleteButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js",["569"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Label, Button, Popup } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false)\r\n  useEffect(() => {\r\n    if (user && likes.find(like => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else {\r\n      setLiked(false)\r\n    }\r\n  }, [user, likes])\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  })\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n        <Button color=\"teal\" basic>\r\n          <Icon name=\"heart\" />\r\n        </Button>\r\n      )\r\n  ) : (\r\n      <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    );\r\n  return (\r\n    <>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>\r\n        <Button as='div' labelPosition='right' onClick={likePost}>\r\n          {likeButton}\r\n          <Label basic color='teal' pointing='left'>\r\n            {likeCount}\r\n          </Label>\r\n        </Button>\r\n      </MyPopup>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId:ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default LikeButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js",["570"],"import React, { useContext, useState } from 'react'\r\nimport { Menu, Dropdown, Button, Segment, Image, Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IoMdBicycle } from 'react-icons/io';\r\n\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { user, logout } = useContext(AuthContext)\r\n    const pathname = window.location.pathname\r\n    const path = pathname === '/' ? 'profile' : pathname.substr(1)\r\n\r\n    const [activeItem, setActiveItem] = useState(path)\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n        if(name==='cart'){\r\n            window.location.href = '/cart'\r\n        }else if(name==='bookmark'){\r\n            window.location.href = '/wishList'\r\n        }else if(name==='login'){\r\n            window.location.href = '/login'\r\n        }else if(name==='home'||'shop'){\r\n            window.location.href = '/'\r\n        }\r\n    }\r\n    const handleItemHover = () => {\r\n        // handleItemClick()\r\n        props.onDimmed()\r\n    }\r\n\r\n    const navBar = user ? (\r\n\r\n        // logged in navbar\r\n        <Segment>\r\n            <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                <Menu size=\"large\" fluid inverted secondary>\r\n                    <Menu.Item></Menu.Item>\r\n                    <Menu.Item\r\n                        active={activeItem === 'home'}\r\n                        onClick={handleItemClick}\r\n                        // as={Link}\r\n                        // to=\"/\"\r\n                    >\r\n                        <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                        <div className=\"logo\">Gowes</div>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        name='shop'\r\n                        active={activeItem === 'shop'}\r\n                        onClick={handleItemClick}\r\n                        // as={Link}\r\n                        // to=\"/\"\r\n                    />\r\n                    <Menu.Item\r\n                        name='event'\r\n                        active={activeItem === 'event'}\r\n                        onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/event\"\r\n                    />\r\n\r\n\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            name='bookmark'\r\n                            active={activeItem === 'bookmark'}\r\n                            onClick={handleItemClick}\r\n                            // as={Link}\r\n                            // to=\"/wishList\"\r\n                        >\r\n                            <MyPopup content=\"Wishlist\">\r\n                                <Icon name=\"heart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='cart'\r\n                            active={activeItem === 'cart'}\r\n                            onClick={handleItemClick}\r\n                            // as={Link}\r\n                            // to=\"/cart\"\r\n                        >\r\n                            <MyPopup content=\"Cart\">\r\n                                <Icon name=\"cart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        >\r\n                            <Image circular src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\" style={{ height: 30, marginRight: 0 }} verticalAlign='middle' />\r\n                            <Dropdown item text={user.name} style={{ marginLeft: 0 }}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to=\"/profile/profileCard\"><Icon name=\"user\"/>My Profile</Dropdown.Item>\r\n                                    <Dropdown.Item as={Link} to=\"/myStore/myStoreDetailsCard\"><Icon name=\"bicycle\"/>My Store</Dropdown.Item>\r\n                                    {/* <Dropdown.Item>Transaksi</Dropdown.Item> */}\r\n                                    <Dropdown.Item as={Link} to=\"/\" name='logout' onClick={logout}><Icon name=\"sign out\" color=\"red\" /> Logout</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item></Menu.Item>\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </div>\r\n        </Segment>\r\n   \r\n   ) : (\r\n        // guest navbar\r\n            <Segment inverted>\r\n                <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                    <Menu fluid inverted secondary size='large'>\r\n                        <Menu.Item></Menu.Item>\r\n                        <Menu.Item\r\n                            active={activeItem === ''}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        >\r\n                            <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                            <div className=\"logo\">Gowes</div>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='shop'\r\n                            active={activeItem === 'shop'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        />\r\n                        <Menu.Item\r\n                            name='event'\r\n                            active={activeItem === 'event'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/event\"\r\n                        />\r\n\r\n\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                <Button\r\n                                    color='teal'\r\n                                    inverted\r\n                                    name='login'\r\n                                    active={activeItem === 'login'}\r\n                                    onClick={handleItemClick}\r\n                                    as={Link}\r\n                                    to=\"/login\"\r\n                                    style={{ marginRight: 10 }}\r\n                                >\r\n                                    Sign In\r\n                            </Button>\r\n                            </Menu.Item>\r\n                            <Menu.Item></Menu.Item>\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </div>\r\n            </Segment>\r\n\r\n        )\r\n    return navBar\r\n}\r\n\r\nexport default NavBar","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js",["571"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction BookmarkButton({ user, item: { id, bookmarkedBy } }) {\r\n    const [bookmarked, setBookmarked] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (user.user && bookmarkedBy.find(bookmark => bookmark.userId === user.user.id)) {\r\n            setBookmarked(true)\r\n        } else {\r\n            setBookmarked(false)\r\n        }\r\n    }, [user, bookmarkedBy])\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [bookmarkPost] = useMutation(BOOKMARK_ITEM_MUTATION, {\r\n        variables: { itemId: id },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_BOOKMARKS_QUERY\r\n            })\r\n\r\n            if (!bookmarked) {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: [result.data.bookmarkItem, ...data.getBookmarks]\r\n                    }\r\n                })\r\n            } else {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: data.getBookmarks.filter(item => item.id !== id)\r\n                    },\r\n                })\r\n            }\r\n\r\n\r\n\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n    })\r\n\r\n    const bookmarkButton = user.user ? (\r\n        bookmarked ? (\r\n            <Button fluid color=\"teal\">\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        ) : (\r\n                <Button fluid color=\"teal\" basic>\r\n                    <Icon name=\"heart\" />\r\n                </Button>\r\n            )\r\n    ) : (\r\n            <Button fluid as={Link} to=\"/login\" color=\"teal\" basic>\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        );\r\n    return (\r\n\r\n        <MyPopup content={bookmarked ? 'Remove Wishlist' : 'Add Wishlist'}>\r\n            <div as='div' onClick={user ? bookmarkPost : ''}>\r\n                {bookmarkButton}\r\n            </div>\r\n        </MyPopup>\r\n\r\n    )\r\n}\r\n\r\nconst BOOKMARK_ITEM_MUTATION = gql`\r\n    mutation bookmarkItem($itemId:ID!){\r\n        bookmarkItem(itemId: $itemId){\r\n            id\r\n            bookmarkedBy{\r\n                id\r\n                userId\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default BookmarkButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js",["572","573","574"],"import React from 'react';\r\nimport { Grid, Ref, Message, Transition } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport CartCard from '../components/CartCard';\r\nimport ItemSummaryCard from '../components/ItemSummaryCard';\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction Cart() {\r\n  const contextRef = React.createRef();\r\n\r\n  const { loading, data, refetch } = useQuery(FETCH_USER_CART_QUERY)\r\n  let { getUserCartItems: cartItems } = data ? data : []\r\n\r\n  console.log(cartItems)\r\n\r\n  Object.size = function (obj) {\r\n    var size = 0,\r\n      key;\r\n    for (key in obj) {\r\n      if (obj.hasOwnProperty(key)) size++;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  var size = Object.size(cartItems)\r\n\r\n  let cartMarkup = (\r\n    <>\r\n      <br></br>\r\n      <Grid.Column width={16}><h1>My Cart</h1></Grid.Column>\r\n      <>\r\n        <Message\r\n          error\r\n          icon='cart'\r\n          header='You dont have items in cart'\r\n          content='add items to cart'\r\n          style={{ marginBottom: 202 }}\r\n        />\r\n      </>\r\n    </>\r\n  )\r\n  if (!loading) {\r\n    if (size >0) {\r\n      let group = cartItems.reduce((r, a) => {\r\n        r[a.item.user.id] = [...r[a.item.user.id] || [], a];\r\n        return r;\r\n      }, {});\r\n      console.log(group)\r\n\r\n      Object.keys(group).map(function (key, index) {\r\n        console.log(group[key])\r\n      })\r\n      cartMarkup = (\r\n        <Ref innerRef={contextRef}>\r\n          <Grid stackable>\r\n            <Grid.Column width={16}></Grid.Column>\r\n            <Grid.Column width={12} >\r\n              {group &&\r\n                Object.keys(group).map((key, index) =>\r\n                (\r\n                  <CartCard cartItem={group[key]}></CartCard>\r\n                )\r\n                )\r\n              }\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <ItemSummaryCard contextRef={contextRef}  ></ItemSummaryCard>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Ref>\r\n      )\r\n    }\r\n\r\n\r\n  }\r\n  return cartMarkup\r\n}\r\n\r\nexport default Cart;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js",["575","576"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition, Message } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data } = useQuery(FETCH_BOOKMARKS_QUERY)\r\n  const { getBookmarks: bookmarks } = data ? data : []\r\n\r\n  console.log(bookmarks)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Column width={16}></Grid.Column>\r\n      <Grid.Column width={16}><h1>My Wishlist</h1></Grid.Column>\r\n      <Grid.Row>\r\n        {loading || bookmarks==0? (\r\n          <>\r\n          <Message\r\n            error\r\n            icon='heart'\r\n            header='You dont have any wishlisted items'\r\n            content='add wishlist if want to mark the item'\r\n            style={{marginBottom:109}}\r\n          />\r\n          <Grid></Grid>\r\n          </>\r\n        ) : (\r\n            <>\r\n              <Transition.Group duration={700}>\r\n                {bookmarks &&\r\n                  bookmarks.map((bookmark) => (\r\n                    <Grid.Column key={bookmark.id} style={{ marginBottom: 20 }}>\r\n                      <ShopCard item={bookmark} />\r\n                    </Grid.Column>\r\n                  ))}\r\n              </Transition.Group>\r\n            </>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js",["577"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\n\r\nfunction ProfileCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n    const [avatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }} className={loading ? \"loading\" : \"\"}>\r\n                        <Card.Content header='Profile Details' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.buyer.avatar} wrapped ui={false} />\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            icon='user'\r\n                                            iconPosition='left'\r\n                                            placeholder='Name'\r\n                                            label='Name'\r\n                                            value={currentUser.buyer.name}\r\n                                            name=\"name\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            icon='mail'\r\n                                            iconPosition='left'\r\n                                            placeholder='Email'\r\n                                            label='Email'\r\n                                            value={currentUser.email}\r\n                                            name=\"email\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            icon='phone'\r\n                                            iconPosition='left'\r\n                                            placeholder='Phone Number'\r\n                                            label='Phone Number'\r\n                                            value={currentUser.email}\r\n                                            name=\"phone\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            icon='calendar'\r\n                                            iconPosition='left'\r\n                                            placeholder='Birth Date'\r\n                                            label='Birth Date'\r\n                                            name=\"birthDate\"\r\n                                            value={currentUser.buyer.birthDate}\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            placeholder='City'\r\n                                            label='Address'\r\n                                            name=\"city\"\r\n                                            value=\"Bandung\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            placeholder='Districts'\r\n                                            name=\"districts\"\r\n                                            value=\"Ujungberung\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            placeholder='Postal Code'\r\n                                            name=\"postalCode\"\r\n                                            value=\"40617\"\r\n                                        />\r\n                                        <Form.Input\r\n                                            readOnly\r\n                                            fluid\r\n                                            placeholder='Address Details'\r\n                                            name=\"addressDetails\"\r\n                                            value=\"Komplek Pasanggrahan Indah Blok 17 no. 8\"\r\n                                            control={TextArea}\r\n\r\n                                        />\r\n                                        <Button floated=\"right\" color='teal' size='small' as={Link} to=\"/editProfileCard\">\r\n                                            <Icon name=\"edit outline\"></Icon>\r\n                                            Edit\r\n                                        </Button>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n\r\n\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n        </>\r\n    )\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            phone\r\n            address\r\n            balance\r\n            buyer{\r\n                name\r\n                birthDate\r\n                avatar\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default ProfileCard","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js",["578","579","580"],"import React, { useContext } from 'react';\r\nimport { FETCH_ITEM_QUERY, FETCH_CART_QUERY } from '../util/graphql';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Ref, Rail } from 'semantic-ui-react';\r\n\r\n\r\nimport ItemTransactionCard from '../components/ItemTransactionCard'\r\nimport ManageItemSticky from '../components/ManageItemSticky'\r\nimport ItemDetailCard from '../components/ItemDetailCard'\r\nimport ItemImagesCard from '../components/ItemImagesCard'\r\nimport ItemReviewsCard from '../components/ItemReviewsCard'\r\nimport ReviewSummaryCard from '../components/ReviewSummaryCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction ItemDetail(props) {\r\n  const itemId = props.match.params.itemId;\r\n  const context = useContext(AuthContext);\r\n  const contextRef = React.createRef();\r\n  const imageContextRef = React.createRef();\r\n  const { loading, data: itemData, data: reviewData } = useQuery(FETCH_ITEM_QUERY, {\r\n    variables: {\r\n      itemId: itemId\r\n    }\r\n  })\r\n  const { getItem: item } = itemData ? itemData : []\r\n  const { getItemReviews: reviews } = reviewData ? reviewData : []\r\n\r\n  let postMarkup = (<p>Loading item..</p>);\r\n  if (item) {\r\n    postMarkup = (\r\n      <Ref innerRef={contextRef}>\r\n        <Grid>\r\n          <Grid.Column width={12}>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <Ref innerRef={imageContextRef}>\r\n                <Grid>\r\n                  <Grid.Column width={6}>\r\n                    <ItemImagesCard contextRef={imageContextRef} images={item.images} />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={10} style={{ paddingTop: 50 }}>\r\n                    <ItemDetailCard item={item} />\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Ref>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <ReviewSummaryCard />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <ItemReviewsCard reviews={reviews} />\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={4}>\r\n            {context.user ? (context.user.id !== item.user.id ? (\r\n              <ItemTransactionCard contextRef={contextRef} item={item} />\r\n            ) : (\r\n                <ManageItemSticky contextRef={contextRef} item={item} />\r\n              )):(<div></div>)}\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Ref>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nexport default ItemDetail;","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js",["581"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { storage } from '../firebase';\r\nimport { useForm } from '../util/hooks'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction EditMyStoreDetailsCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n\r\n    const fileInputRef = React.createRef();\r\n    const [avatar, setAvatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    const fileChange = e => {\r\n        const image = e.target.files[0]\r\n        if (image) {\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => { },\r\n                error => { console.log(error) },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            setAvatar(url);\r\n                            console.log(url);\r\n                        });\r\n                });\r\n        }\r\n    };\r\n    console.log(\"File chosen --->\", avatar);\r\n\r\n    let userObj = {\r\n        avatar: '',\r\n        username: currentUser.seller.username,\r\n        description: currentUser.seller.description\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(updateSellerProfile, userObj)\r\n\r\n    const [sellerProfileUpdate, { }] = useMutation(UPDATE_SELLER_PROFILE_MUTATION, {\r\n        update(_, { data: { updateSellerProfile: sellerData } }) {\r\n            sellerData.username = sellerData.seller.username;\r\n            context.login(sellerData)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/myStore/myStoreDetailsCard')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            setSave(true)\r\n        },\r\n\r\n        variables: values\r\n    })\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    function updateSellerProfile() {\r\n        values.avatar = avatar\r\n        sellerProfileUpdate()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content header='My Store Detail Form' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.seller.avatar} wrapped ui={false} />\r\n                                        <Card.Content extra>\r\n                                            <Form>\r\n                                                <Button fluid onClick={() => fileInputRef.current.click()}>Change Avatar</Button>\r\n                                                <input ref={fileInputRef} type=\"file\" hidden onChange={fileChange} />\r\n                                            </Form>\r\n                                        </Card.Content>\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Store Name'\r\n                                            label='Store Name'\r\n                                            value={values.username}\r\n                                            name=\"username\"\r\n                                            onChange={onChange}\r\n                                            error={errors.username ? true : false}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            iconPosition='left'\r\n                                            placeholder='Store Description'\r\n                                            label='Description'\r\n                                            control={TextArea}\r\n                                            value={values.description}\r\n                                            name=\"description\"\r\n                                            onChange={onChange}\r\n                                        />\r\n                                        <Button color='teal' size='small' floated=\"right\">\r\n                                            <Icon name=\"check circle outline\"></Icon>\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form>\r\n                                    {showMessage()}\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            seller{\r\n            id\r\n            username\r\n            avatar\r\n            description\r\n            description\r\n            createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst UPDATE_SELLER_PROFILE_MUTATION = gql`\r\n    mutation updateSellerProfile(\r\n        $username: String!\r\n        $avatar: String!\r\n        $description: String!\r\n    ){\r\n        updateSellerProfile(\r\n            sellerProfileInput:{\r\n            username: $username\r\n            avatar: $avatar\r\n            description: $description\r\n            }\r\n        ) {\r\n            id\r\n            token\r\n            seller{\r\n                id\r\n                username\r\n                avatar\r\n                description\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default withRouter(EditMyStoreDetailsCard)","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js",["582"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { storage } from '../firebase';\r\nimport { useForm } from '../util/hooks'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\n\r\nfunction EditProfileCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n    let userObj = {\r\n        avatar: '',\r\n        name: currentUser.buyer.name,\r\n        email: currentUser.email,\r\n        phone: currentUser.phone,\r\n        birthDate: currentUser.buyer.name\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(updateUserProfile, userObj)\r\n\r\n    // console.log(\"user data\", currentUser)\r\n\r\n    const fileInputRef = React.createRef();\r\n    const [avatar, setAvatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    const fileChange = e => {\r\n        const image = e.target.files[0]\r\n        if (image) {\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => { },\r\n                error => { console.log(error) },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            setAvatar(url);\r\n                            console.log(url);\r\n                        });\r\n                });\r\n        }\r\n    };\r\n    console.log(\"File chosen --->\", avatar);\r\n\r\n    const [updateProfile, { }] = useMutation(UPDATE_PROFILE_MUTATION, {\r\n        update(_, { data: { updateUserProfile: userData } }) {\r\n            userData.name = userData.buyer.name;\r\n            context.login(userData)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/profile/profileCard')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            setSave(true)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n\r\n    function updateUserProfile() {\r\n        values.avatar = avatar\r\n        updateProfile()\r\n    }\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    const options = [\r\n        { key: 'bandung', text: 'Bandung', value: 'bandung' },\r\n        { key: 'jakarta', text: 'Jakarta', value: 'jakarta' },\r\n        { key: 'Malang', text: 'Malang', value: 'Malang' },\r\n    ]\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }} className={loading ? \"loading\" : \"\"}>\r\n                        <Card.Content header='Profile Details' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.buyer.avatar} wrapped ui={false} />\r\n                                        <Card.Content extra>\r\n                                            <Form>\r\n                                                <Button fluid onClick={() => fileInputRef.current.click()}>Change Avatar</Button>\r\n                                                <input ref={fileInputRef} type=\"file\" hidden onChange={fileChange} />\r\n                                            </Form>\r\n                                        </Card.Content>\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='user'\r\n                                            iconPosition='left'\r\n                                            placeholder='Name'\r\n                                            label='Name'\r\n                                            value={values.name}\r\n                                            name=\"name\"\r\n                                            onChange={onChange}\r\n                                            error={errors.name ? true : false}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='mail'\r\n                                            iconPosition='left'\r\n                                            placeholder='Email'\r\n                                            label='Email'\r\n                                            value={values.email}\r\n                                            name=\"email\"\r\n                                            onChange={onChange}\r\n                                            error={errors.email ? true : false}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='phone'\r\n                                            iconPosition='left'\r\n                                            placeholder='Phone Number'\r\n                                            label='Phone Number'\r\n                                            value={values.phone}\r\n                                            name=\"phone\"\r\n                                            onChange={onChange}\r\n                                            error={errors.phone ? true : false}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            icon='calendar'\r\n                                            iconPosition='left'\r\n                                            placeholder='Birth Date'\r\n                                            label='Birth Date'\r\n                                            name=\"birthDate\"\r\n                                            value={values.date}\r\n                                            type=\"date\"\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Select\r\n                                            fluid\r\n                                            placeholder='City'\r\n                                            label='Address'\r\n                                            name=\"city\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n                                            options={options}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Districts'\r\n                                            name=\"districts\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Postal Code'\r\n                                            name=\"postalCode\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Address Details'\r\n                                            name=\"addressDetails\"\r\n                                            value={values.address}\r\n                                            onChange={onChange}\r\n                                            control={TextArea}\r\n\r\n                                        />\r\n                                        <Button color='teal' size='small' floated=\"right\">\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form>\r\n                                    {showMessage()}\r\n                                </Grid.Column>\r\n                            </Grid>\r\n\r\n\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n        </>\r\n    )\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            phone\r\n            address\r\n            balance\r\n            buyer{\r\n                name\r\n                birthDate\r\n                avatar\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst UPDATE_PROFILE_MUTATION = gql`\r\n    mutation updateUserProfile(\r\n        $avatar: String!\r\n        $name: String!\r\n        $email: String!\r\n        $phone: String!\r\n        $birthDate: String!\r\n    ){\r\n    updateUserProfile(\r\n        userProfileInput:{\r\n            avatar: $avatar\r\n            name: $name\r\n            email: $email\r\n            phone: $phone\r\n            birthDate: $birthDate\r\n            }\r\n        ) {\r\n        id\r\n        email\r\n        phone\r\n        address\r\n        balance\r\n        token\r\n        buyer {\r\n            name\r\n            birthDate\r\n            avatar\r\n        }\r\n    }\r\n    }\r\n`\r\n\r\nexport default withRouter(EditProfileCard)","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js",["583"],"import React, { useContext } from 'react'\r\nimport { Button, Card, Icon, Grid, Message, Image, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\n\r\n\r\nimport MyItemsCard from '../components/MyItemsCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction MyItemList(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const { loading, data } = useQuery(FETCH_ITEM_SELLER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n\r\n        }\r\n    })\r\n    const { getSellerItems: sellerItems } = data ? data : []\r\n\r\n    console.log(sellerItems ? \"ada isi\" : \"kosong\")\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(sellerItems)\r\n\r\n    return (\r\n        <>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"My Items\">\r\n                </Card.Content>\r\n                <Button color=\"teal\" as={Link} to=\"/addItem\">\r\n                    <Icon name=\"plus\"></Icon>\r\n                    Add Atem\r\n                </Button>\r\n            </Card>\r\n            {!loading ? (size > 0 ? (\r\n\r\n                <>\r\n                    <Divider />\r\n                    <Grid container verticalAlign='middle'>\r\n                        <Grid.Column width={2} centered>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={2} verticalAlign='middle' >\r\n                            <h4>Item Name</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' c>\r\n                            <h4>Remaining Stock</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Selled</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Price</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Rating</h4>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                    <Divider />\r\n                    {sellerItems &&\r\n                        sellerItems.map((sellerItem) => (\r\n                            <Grid.Column key={sellerItem.id} style={{ marginBottom: 20 }}>\r\n                                <MyItemsCard item={sellerItem}></MyItemsCard>\r\n                            </Grid.Column>\r\n                        ))}\r\n                </>\r\n            ) : (\r\n                    <>\r\n                        <Message\r\n                            error\r\n                            icon='inbox'\r\n                            header='You dont have any items'\r\n                            content='add items to sell your things'\r\n                        />\r\n                        <br></br>\r\n                        <br></br>\r\n                        <br></br>\r\n                    </>\r\n\r\n                )) : (<h4>Loading...</h4>)\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport const FETCH_ITEM_SELLER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getSellerItems(userId: $userId){\r\n    id\r\n    name\r\n    price\r\n    createdAt\r\n    description\r\n    weight\r\n    images{\r\n      id\r\n      downloadUrl\r\n    }\r\n    bookmarkedBy{\r\n      id\r\n      userId\r\n      createdAt\r\n    }\r\n    user{\r\n      seller{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\nexport default MyItemList","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js",["584"],"import React, { useContext } from 'react';\r\nimport { Card, Icon, Image, Grid } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction MyItemsCard({item: { id,name, price, stock }}) {\r\n    const { user } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Card fluid  style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Grid container>\r\n                <Grid.Column width={2} centered>\r\n                    <Image\r\n                        fluid\r\n                        centered\r\n                        rounded\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        size='small'\r\n                        style={{ margin: 10 }}\r\n                        as={Link}\r\n                        to={`/items/${id}`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle'>\r\n                    <h4>{name}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>4</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>100</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>{price}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                    <Icon name='star' style={{ color: 'gold' }}></Icon>\r\n                    4\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MyItemsCard;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js",["585","586","587"],"import React, { useContext, useState } from 'react'\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction AddItem(props) {\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const { onChange, onSubmit, values } = useForm(addItem, {\r\n        name: '',\r\n        price: 0,\r\n        stock: 0,\r\n        category: '',\r\n        condition: '',\r\n        weight: 0,\r\n        description: '',\r\n        length: 0,\r\n        width: 0,\r\n        height: 0\r\n    })\r\n\r\n    const [submitItem, { loading }] = useMutation(ADD_ITEM_MUTATION, {\r\n        update(_, { data: { addItem: items } }) {\r\n            // context.login(items)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/mystore/myItemsList')\r\n            console.log(\"data\", addItem)\r\n            window.location.href = '/myStore/myItemsList'\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n            setSave(true)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function addItem() {\r\n        values.price = parseInt(values.price)\r\n        values.stock = parseInt(values.stock)\r\n        values.weight = parseInt(values.weight)\r\n        values.length = parseInt(values.length)\r\n        values.width = parseInt(values.width)\r\n        values.height = parseInt(values.height)\r\n        submitItem()\r\n    }\r\n    console.log(values)\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid centered stackable>\r\n            <Grid.Column width={12}>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Image' />\r\n                    <Card.Content>\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button\r\n                            fluid\r\n                            color='standard'\r\n                            size='small'\r\n                        >\r\n                            <Icon name=\"plus\"></Icon>\r\n                            add Image\r\n                            </Button>\r\n                    </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Details' />\r\n                    <Card.Content extra>\r\n                        <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"} noValidate>\r\n                            <Form.Input\r\n                                fluid\r\n                                placeholder='Item Name'\r\n                                label='Item Name'\r\n                                value={values.name}\r\n                                name=\"name\"\r\n                                onChange={onChange}\r\n                            />\r\n                            <Form.Group inline>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Category'\r\n                                    label='Category'\r\n                                    onChange={onChange}\r\n                                    name=\"category\"\r\n                                    control='select'\r\n                                    value={values.category}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='sparepart'>Sparepart</option>\r\n                                    <option value='accessories'>Accessories</option>\r\n                                    <option value='apparel'>Apparel</option>\r\n                                </Form.Field>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Condition'\r\n                                    label='Condition'\r\n                                    onChange={onChange}\r\n                                    name=\"condition\"\r\n                                    control='select'\r\n                                    value={values.condition}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='new'>New</option>\r\n                                    <option value='used'>Used</option>\r\n                                </Form.Field>\r\n                            </Form.Group>\r\n                            <Form.Input\r\n                                fluid\r\n                                iconPosition='left'\r\n                                placeholder='Item Description'\r\n                                label='Description'\r\n                                control={TextArea}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                onChange={onChange}\r\n\r\n                            />\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Rp'\r\n                                    label='Price'\r\n                                    value={values.price}\r\n                                    name=\"price\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Amount Item'\r\n                                    label='Amount Item'\r\n                                    value={values.stock}\r\n                                    name=\"stock\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={100}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='kg'\r\n                                    label='Weight'\r\n                                    value={parseInt(values.weight)}\r\n                                    name=\"weight\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={10}\r\n                                    min={1}\r\n\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Length'\r\n                                    value={values.length}\r\n                                    name=\"length\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Width'\r\n                                    value={values.width}\r\n                                    name=\"width\"\r\n                                    type=\"number\"\r\n                                    max={1000}\r\n                                    min={1}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Height'\r\n                                    value={values.height}\r\n                                    name=\"height\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                size='small'\r\n                            >\r\n                                Save Item\r\n                            </Button>\r\n                        </Form>\r\n                        {showMessage()}\r\n                    </Card.Content>\r\n                </Card>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst ADD_ITEM_MUTATION = gql`\r\n  mutation addItem(\r\n    $name: String!\r\n    $price: Int!\r\n    $stock: Int!\r\n    $category: String!\r\n    $condition: String!\r\n    $weight: Int!\r\n    $description: String!\r\n    $length: Int!\r\n    $width: Int!\r\n    $height: Int!\r\n  ) {\r\n    addItem(addItemInput:{\r\n        name: $name,\r\n        price: $price,\r\n        stock: $stock,\r\n        category: $category,\r\n        condition: $condition,\r\n        weight: $weight,\r\n        description: $description\r\n        dimension: {\r\n            length: $length,\r\n            width: $width\r\n            height: $height\r\n        },\r\n        images: [{\r\n            downloadUrl:\"\"\r\n        }]\r\n    }){\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        category\r\n        condition\r\n        weight\r\n        description\r\n        dimension {\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images {\r\n            downloadUrl\r\n        }\r\n        createdAt\r\n    }\r\n    }\r\n  \r\n`\r\n\r\nexport default AddItem","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js",["588","589"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction ItemTransactionCard({ props, contextRef, item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const [addToCart] = useMutation(ADD_TO_CART_MUTATION, {\r\n        variables: { itemId: item.id, amountItem: amountItem },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: [result.data.addCartItem, ...data.getUserCartItems]\r\n                }\r\n            })\r\n\r\n            const cartItem = proxy.readQuery({\r\n                query: FETCH_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_CART_QUERY,\r\n                data: {\r\n                    getUserCartItem: cartItem.getUserCartItem\r\n                }\r\n            })\r\n\r\n            \r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n        },\r\n    })\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    console.log(visible)\r\n\r\n    function addItemToCart() {\r\n        // refetch()\r\n        addToCart()\r\n        setVisible(true)\r\n        // window.location.href='/items'\r\n        window.location.reload(false);\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <h1>loading...</h1>\r\n    )\r\n    if (!loading) {\r\n        itemMarkup = (\r\n            <>\r\n                <Sticky context={contextRef} offset={130}>\r\n                    <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content>\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                        <Icon name=\"angle down\" />\r\n                                    </List.Content>\r\n                                    <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"minus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                disabled={inCartAmount + amountItem >= item.stock}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"plus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                    </List>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Content floated='left' verticalAlign=\"middle\">\r\n                                        <Header as=\"h5\">Sub Total</Header>\r\n                                    </List.Content>\r\n                                    <List.Content floated='right'>\r\n                                        <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                    </List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n\r\n                                </List.Item>\r\n                            </List>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <div className='ui two buttons'>\r\n                                <Button animated='fade'>\r\n                                    <Button.Content visible>Buy</Button.Content>\r\n                                    <Button.Content hidden floated='left' style={{ borderRadius: 8, marginRight: 2 }}>\r\n                                        Checkout Now!\r\n                            </Button.Content>\r\n                                </Button>\r\n                                <Button color=\"teal\" animated='vertical' onClick={addItemToCart} disabled={inCartAmount === item.stock}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"cart arrow down\" />\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                        Add to Cart\r\n                            </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                            <div className='ui two buttons' style={{ marginTop: 8, marginLeft: 2 }}>\r\n                                <Button animated>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"chat\" />{\" Chat\"}\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                                        Go to Chat?\r\n                                    </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                        </Card.Content>\r\n                    </Card>\r\n                    {visible ? (\r\n                        <Message\r\n                            positive\r\n                            onDismiss={handleDismiss}\r\n                            header='Added to cart!'\r\n                            content='Open cart menu for details.'\r\n                            style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                        />\r\n                    ) : (<div></div>)\r\n                    }\r\n\r\n                </Sticky>\r\n            </>\r\n        )\r\n    }\r\n    return itemMarkup\r\n}\r\n\r\nconst ADD_TO_CART_MUTATION = gql`\r\n    mutation addCartItem($itemId:ID!, $amountItem: Int!){\r\n        addCartItem(itemId: $itemId, note:\"\", amountItem:$amountItem)  {\r\n            note\r\n            amountItem\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default ItemTransactionCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js",["590"],"import React from 'react';\r\nimport { Container, Header, Icon, List, Image, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction ItemDetailCard({ item }) {\r\n    let itemDetailMarkup = (<p>Loading item..</p>)\r\n    console.log(item.user.seller.id)\r\n    if (item) {\r\n        itemDetailMarkup = (\r\n            <Container>\r\n                <Header as='h2'>{item.name}</Header>\r\n                <List horizontal>\r\n                    <List.Item>Terjual 10</List.Item>\r\n                    <List.Item>\r\n                    <Icon name='star' style={{ color: 'gold' }}/>\r\n                    {\" 5 (44 Ulasan)\"}\r\n                    </List.Item>\r\n                </List>\r\n                <Header as='h1'>Rp{item.price}</Header>\r\n                <Container>\r\n                    <List>\r\n                    <List.Item>Condition: {item.condition}</List.Item>\r\n                    <List.Item>Category: {item.category}</List.Item>\r\n                    <List.Item>Weight: {item.weight} Gram</List.Item>\r\n                    </List>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <h4>Description</h4>\r\n                    <p>{item.description}</p>\r\n                </Container>\r\n                <Divider />\r\n                <Container>\r\n                    <List horizontal>\r\n                    <List.Item>\r\n                        <Image\r\n                        src='https://react.semantic-ui.com/images/wireframe/image-text.png'\r\n                        as='a'\r\n                        size='mini'\r\n                        as={Link} to={`/sellerProfile/${item.user.id}`}\r\n                        // target='_blank'\r\n                        />\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Header as='h3' style={{color:'black'}}  >{item.user.seller.username}</Header>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Icon name='star' style={{ color: 'gold' }}/>\r\n                        {\" 4.8 rating toko\"}\r\n                    </List.Item>\r\n                    </List>\r\n                </Container>\r\n                <Divider />\r\n            </Container>\r\n        )\r\n    }\r\n    return itemDetailMarkup\r\n}\r\nexport default ItemDetailCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js",["591"],"import React from 'react';\r\nimport { Item, Container, Rating, Label, List, Image } from 'semantic-ui-react';\r\nimport 'swiper/swiper.scss';\r\n\r\nfunction ItemReviewsCard({ reviews }) {\r\n  return (\r\n    <Container>\r\n      <Item.Group divided>\r\n        {reviews.map((review, index) => (\r\n          <Item>\r\n            <Item.Image size=\"small\" src={review.user.buyer.avatar} />\r\n            <Item.Content>\r\n              <Item.Header as='a'>\r\n                <Rating disabled maxRating={5} defaultRating={review.score} icon='star' size='mini' />\r\n              </Item.Header>\r\n              <Item.Meta>\r\n                <span className='cinema'>{review.body}</span>\r\n              </Item.Meta>\r\n              <List horizontal>\r\n                {review.images.map((image, index) => (\r\n                  <Image src={image.downloadUrl} style={{ width: 60, height: 60 }} />\r\n                ))}\r\n              </List>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n\r\n    </Container>\r\n\r\n  )\r\n}\r\nexport default ItemReviewsCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js",["592"],"import React from 'react';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport ItemCartCard from '../components/ItemCartCard';\r\n\r\n\r\nfunction CartCard({ cartItem }) {\r\n\r\n    console.log(cartItem)\r\n\r\n    \r\n    // console.log(id)\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content>\r\n                <Checkbox\r\n                    label={cartItem[0].item.user.seller.username}\r\n                    style={{ fontWeight: 1000 }}\r\n                />\r\n            </Card.Content>\r\n            {cartItem &&\r\n                cartItem.map((item) => (\r\n                    <ItemCartCard item={item}></ItemCartCard>\r\n                ))}\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\n\r\nexport default CartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js",["593","594","595","596"],"import React, { useState } from 'react';\r\nimport { Card, Grid, Form, Checkbox, Image, Button, Icon, List, Input } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\nfunction ItemCartCard({ item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(item.amountItem)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    console.log(item.item.stock)\r\n\r\n    console.log(item.name)\r\n\r\n    const [deleteItemCart] = useMutation(DELETE_CART_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            // TODO: remove post cache\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: data.getUserCartItems.filter(cart => cart.id !== item.id)\r\n                }\r\n            })\r\n        },\r\n        variables: { cartId: item.id }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card.Content>\r\n                <Grid doubling>\r\n                    <Grid.Column width={1} verticalAlign='middle'></Grid.Column>\r\n\r\n                    <Grid.Column width={2} verticalAlign=\"middle\" style={{ padding: 5 }} >\r\n                        <Image\r\n                            fluid\r\n                            centered\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            as={Link} to={`/items/${item.item.id}`}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} style={{ marginTop: 5 }}>\r\n                        <Grid.Row><h4 >{item.item.name}</h4></Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <h4 style={{ color: 'teal' }}>Rp{item.item.price}</h4>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <Grid>\r\n                                <Grid.Column width={10}>\r\n                                    <Form size=\"small\">\r\n                                        <Form.Group>\r\n                                            <Form.Input\r\n                                                placeholder='Add Notes'\r\n                                                name='notes'\r\n                                            // value={notes}\r\n                                            // onChange={this.handleChange}\r\n                                            />\r\n                                            {/* <Form.Button size=\"mini\" content='Submit' /> */}\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={6}>\r\n                                    <Icon onClick={deleteItemCart} size=\"large\" color=\"grey\" name=\"trash\" style={{ marginRight: 40 }}></Icon>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem === 1}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"minus\"\r\n                                            />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"plus\"\r\n                                                disabled={amountItem >= item.item.stock}\r\n                                            />\r\n                                        </List.Item>\r\n                                        {/* <List.Item>{`Stok  ${item.stock}`}</List.Item> */}\r\n                                    </List>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n        </>\r\n    );\r\n}\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\nexport default ItemCartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js",["597","598"],"import React, { useState } from 'react';\r\nimport { Card, Sticky, Grid, Divider, Button, List } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction ItemSummaryCard({ contextRef }) {\r\n    return (\r\n        <Sticky context={contextRef} offset={130}>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shopping Summary\" />\r\n                <Card.Content>\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                            <List.Content floated='right'>Rp100.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item (x2)</List.Content>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp200.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}><h4>Sub Total</h4></List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Button fluid color=\"teal\" as={Link} to=\"/checkout\">Checkout</Button>\r\n                </Card.Content>\r\n            </Card>\r\n        </Sticky>\r\n    )\r\n}\r\nexport default ItemSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js",["599","600","601","602","603"],"import React, { useState } from 'react';\r\nimport { Grid, Rating, Header, List, Progress, Icon, Item, Container } from 'semantic-ui-react';\r\nimport ProgressBar from './ProgressBar'\r\n\r\nfunction ReviewSummaryCard({ item }) {\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const progressStyle = {\r\n        backgroundColor:'#FEFEFE',\r\n        marginBottom: 10\r\n    }\r\n\r\n    const rateStars = [{\r\n        star: 5,\r\n        amountReviewers: 10\r\n    },{\r\n        star: 4,\r\n        amountReviewers: 5\r\n    },{\r\n        star: 3,\r\n        amountReviewers: 2\r\n    },{\r\n        star: 2,\r\n        amountReviewers: 0\r\n    },{\r\n        star: 1,\r\n        amountReviewers: 0\r\n    }]\r\n\r\n    let totalReviewer = 0;\r\n    rateStars.map((rate) => totalReviewer += rate.amountReviewers)\r\n    \r\n\r\n    let markup = (<Grid>\r\n        <Grid.Column width={8}>\r\n            <Grid>\r\n            <Grid.Row>\r\n                <Container>\r\n                    <Header as=\"h4\">ULASAN(145)</Header>\r\n                    <p className='cinema'>Case Xiaomi Poco X3 NFC Nillkin CamShield - Hitam</p>\r\n                </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={6} style={{padding: 0, marginTop:20}}>\r\n                    <List>\r\n                        <span style={{fontSize:60, fontStyle:'bold'}}>4.9</span>\r\n                        <span>/5</span>\r\n                        <List.Item>\r\n                            <Rating disabled maxRating={5} defaultRating={4} icon='star' size='large' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <span style={{}}>(145) Ulasan</span>\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} style={{ paddingRight: 0 }}>\r\n                    <List>\r\n                        {rateStars.map((rate) => \r\n                            (<List.Item>\r\n                            <Icon style={{ color: 'gold' }} name=\"star\"/>\r\n                            {` ${rate.star}`}\r\n                        </List.Item>)\r\n\r\n                        )}\r\n                       \r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5} style={{ padding: 0, marginTop: 4 }}>\r\n                    <List>\r\n                        {rateStars.map((rate, index) => (\r\n                        <List.Item>\r\n                            <ProgressBar key={index} bgcolor={\"#00B5AD\"} completed={rate.amountReviewers / totalReviewer * 100}/>\r\n                            {/* <Progress size=\"tiny\" percent={rate.amountReviewers / totalReviewer * 100} success style={progressStyle}/> */}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <List>\r\n                        {rateStars.map((rate) => (\r\n                        <List.Item>\r\n                            {rate.amountReviewers}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n        </Grid.Column>\r\n    </Grid>);\r\n    return markup\r\n}\r\nexport default ReviewSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js",["604"],"import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n    const { bgcolor, completed } = props;\r\n  \r\n    const containerStyles = {\r\n      height: 8,\r\n      width: '100%',\r\n      backgroundColor: \"#e0e0de\",\r\n      borderRadius: 50,\r\n      marginBottom: 8\r\n    }\r\n  \r\n    const fillerStyles = {\r\n      height: '100%',\r\n      width: `${completed}%`,\r\n      backgroundColor: bgcolor,\r\n      borderRadius: 'inherit',\r\n      textAlign: 'right'\r\n    }\r\n  \r\n    const labelStyles = {\r\n      padding: 5,\r\n      color: 'white',\r\n      fontWeight: 'bold'\r\n    }\r\n  \r\n    return (\r\n      <div style={containerStyles}>\r\n        <div style={fillerStyles}>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ProgressBar;","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js",["605","606"],"import React, { useState } from 'react'\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport CardMyOrders from './CardMyOrders'\r\n\r\nfunction MyOrders(props) {\r\n\r\n    const [activeItem, setActiveItem] = useState(\"all\")\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n    }\r\n\r\n    var contentToShow\r\n\r\n    contentToShow = <CardMyOrders filter={activeItem}></CardMyOrders>\r\n\r\n    return (\r\n        <>\r\n            <Grid stackable>\r\n                <Grid.Row>\r\n                    <Grid columns={7} stackable centered>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='all'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"all\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                All\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='waiting for payment'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"waiting for payment\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Waiting For Payment\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='waiting for confirmation'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"waiting for confirmation\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Waiting For Confirmation\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order processed'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order processed\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Processed\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order shipped'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order shipped\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Shipped\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order arrived'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order arrived\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Arrived\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order completed'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order completed\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >Order Completed\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column size={16}>\r\n                        {contentToShow}\r\n                        {contentToShow}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js",["607"],"import React, { useState } from 'react'\r\nimport { Button, Card, Grid } from 'semantic-ui-react';\r\n\r\nimport ItemMyOrders from './ItemMyOrders'\r\n\r\nfunction CardMyOrders({ filter }) {\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content><h5>27 Desember 2020</h5></Card.Content>\r\n            <Card.Content>\r\n                <Grid stackable>\r\n                    <Grid.Column width={7}>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>Gebby's Store</h4></Grid.Row>\r\n                        <Grid.Row>(INV/20201229/XX/XII/712589793)</Grid.Row>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <Grid.Row><div>Status</div></Grid.Row>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>{filter}</h4></Grid.Row>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3}>\r\n                        <Grid.Row><div>Sub Total</div></Grid.Row>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>Rp50.000</h4></Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n            <ItemMyOrders></ItemMyOrders>\r\n            <ItemMyOrders></ItemMyOrders>\r\n            <Card.Content>\r\n                <Button floated='right' size='small' color='teal'>See Details</Button>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardMyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemMyOrders.js",["608"],"import React, { useState } from 'react'\r\nimport { Card, Grid, Image } from 'semantic-ui-react';\r\n\r\nfunction ItemMyOrders() {\r\n\r\n    return (\r\n        <Card.Content>\r\n            <Grid stackable>\r\n                <Grid.Column width={2}>\r\n                    <Image\r\n                        fluid\r\n                        centered\r\n                        rounded\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        size='tiny'\r\n                        style={{ margin: 10 }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={5} verticalAlign='middle'>\r\n                    <Grid.Row><div>Item Name</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>Shimano Tourney 7 Speed</h4></Grid.Row>\r\n                </Grid.Column>\r\n                <Grid.Column width={6} verticalAlign='middle'>\r\n                    <Grid.Row><div>Price</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>Rp50.000</h4></Grid.Row>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle'>\r\n                    <Grid.Row><div>Amount Item</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>3</h4></Grid.Row>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Card.Content>\r\n    )\r\n}\r\n\r\nexport default ItemMyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\ManageItemSticky.js",["609","610","611","612","613","614","615"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport DeleteItemButton from '../components/DeleteItemButton'\r\n\r\n\r\n\r\nfunction ManageItemSticky({ props, contextRef, item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <>\r\n            <Sticky context={contextRef} offset={130}>\r\n                <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                    <Card.Content>\r\n                        <List>\r\n                            <List.Item>\r\n                                <List.Content floated='right'>\r\n                                    <Icon name=\"angle down\" />\r\n                                </List.Content>\r\n                                <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List horizontal>\r\n                                    <List.Item>\r\n                                        <Button\r\n                                            onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                            disabled={amountItem <= 1}\r\n                                            size=\"mini\"\r\n                                            circular\r\n                                            icon=\"minus\" />\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <Input\r\n                                            transparent\r\n                                            placeholder='1'\r\n                                            value={amountItem}\r\n                                            style={{ width: 18 }} />\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <Button\r\n                                            onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                            disabled={inCartAmount + amountItem >= item.stock}\r\n                                            size=\"mini\"\r\n                                            circular\r\n                                            icon=\"plus\" />\r\n                                    </List.Item>\r\n                                    <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                </List>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content floated='left' verticalAlign=\"middle\">\r\n                                    <Header as=\"h5\">Sub Total</Header>\r\n                                </List.Content>\r\n                                <List.Content floated='right'>\r\n                                    <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <div className='ui two buttons'>\r\n                            <Button\r\n                                animated='vertical'\r\n                                as={Link}\r\n                                // to={`/editItem/${item.id}`}\r\n                                to={{\r\n                                    pathname: `/editItem/${item.id}`,\r\n                                    item: {\r\n                                        name: item.name,\r\n                                        price: item.price,\r\n                                        stock: item.stock,\r\n                                        category: item.category,\r\n                                        condition: item.condition,\r\n                                        weight: item.weight,\r\n                                        description: item.description,\r\n                                        length: item.dimension.length,\r\n                                        width: item.dimension.width,\r\n                                        height: item.dimension.height,\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <Button.Content visible>\r\n                                    <Icon name=\"edit\" /> Edit\r\n                                </Button.Content>\r\n                                <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                    Modify Item Info\r\n                            </Button.Content>\r\n                            </Button>\r\n                            <DeleteItemButton itemId={item.id}></DeleteItemButton>\r\n                        </div>\r\n                    </Card.Content>\r\n                </Card>\r\n\r\n            </Sticky>\r\n        </>\r\n    )\r\n    return itemMarkup\r\n}\r\n\r\n\r\nexport default ManageItemSticky","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteItemButton.js",["616","617"],"import React, { useState, useContext } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button, Confirm, Popup } from 'semantic-ui-react'\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction DeleteButton({ itemId }) {\r\n\r\n    const context = useContext(AuthContext);\r\n    const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n    console.log(itemId)\r\n\r\n    const [deleteItem] = useMutation(DELETE_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            setConfirmOpen(false)\r\n            // TODO: remove post cache\r\n\r\n            const data = proxy.readQuery({\r\n                query: FETCH_ITEM_SELLER_QUERY,\r\n                variables: { userId: context.user.id }\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_ITEM_SELLER_QUERY,\r\n                data: {\r\n                    getSellerItems: data.getSellerItems.filter(p => p.id !== itemId)\r\n                }\r\n            })\r\n\r\n        },\r\n        variables: { itemId: itemId }\r\n    })\r\n\r\n    function itemDelete() {\r\n        deleteItem()\r\n        window.location.href = '/myStore/myItemsList'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button animated='fade' color=\"red\" onClick={() => setConfirmOpen(true)}>\r\n                <Button.Content visible>\r\n                    <Icon name=\"trash\" />\r\n                </Button.Content>\r\n                <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                    Delete Item\r\n                </Button.Content>\r\n            </Button>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={itemDelete}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_ITEM_MUTATION = gql`\r\n    mutation deleteItem($itemId:ID!){\r\n        deleteItem(itemId:$itemId)\r\n    }\r\n`\r\n\r\nconst FETCH_ITEM_SELLER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getSellerItems(userId: $userId){\r\n    id\r\n    name\r\n    price\r\n    createdAt\r\n    description\r\n    weight\r\n    images{\r\n      id\r\n      downloadUrl\r\n    }\r\n    bookmarkedBy{\r\n      id\r\n      userId\r\n      createdAt\r\n    }\r\n    user{\r\n      seller{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\n\r\nexport default DeleteButton","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SellerProfile.js",["618"],"import React from 'react';\r\nimport { Grid, Ref  } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport SideBarSellerProfile from '../components/SideBarSellerProfile';\r\nimport ShopCard from '../components/ShopCard';\r\n\r\nfunction SellerProfile(props) {\r\n\r\n    const contextRef = React.createRef();\r\n\r\n    const userId = props.match.params.userId;\r\n\r\n    const { loading, data: itemData, data: userData } = useQuery(FETCH_SELLER_PROFILE_QUERY, {\r\n        variables: {\r\n            userId: userId\r\n        }\r\n    })\r\n    const { getUser: user } = userData ? userData : []\r\n    const { getSellerItems: items } = itemData ? itemData : []\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(user)\r\n    let postMarkup = (<p>Loading item..</p>);\r\n    if (size > 0) {\r\n        postMarkup = (\r\n            <Ref innerRef={contextRef}>\r\n                <Grid stackable>\r\n                    <Grid.Column width={4}>\r\n                        <SideBarSellerProfile contextRef={contextRef} user={user}></SideBarSellerProfile>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                        <br></br>\r\n                        <Grid stackable columns={5}>\r\n                            {items &&\r\n                                items.map((item) => (\r\n                                    <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                                        <ShopCard item={item} />\r\n                                    </Grid.Column>\r\n                                ))}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Ref>\r\n        )\r\n    }\r\n    return postMarkup\r\n}\r\n\r\nconst FETCH_SELLER_PROFILE_QUERY = gql`\r\n    query($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            seller{\r\n            id\r\n            username\r\n            avatar\r\n            description\r\n            description\r\n            createdAt\r\n            }\r\n        }\r\n        getSellerItems(userId: $userId){\r\n            id\r\n            name\r\n            price\r\n            createdAt\r\n            description\r\n            weight\r\n            images{\r\n                id\r\n                downloadUrl\r\n            }\r\n            bookmarkedBy{\r\n                id\r\n                userId\r\n                createdAt\r\n            }\r\n            user{\r\n                seller{\r\n                    username\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n`;\r\n\r\nexport default SellerProfile","D:\\SKRIPSI\\gowes\\client\\src\\components\\SideBarSellerProfile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\EditItem.js",["619","620","621"],"import React, { useState } from 'react'\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction EditItem(props) {\r\n\r\n    const itemId = props.match.params.itemId;\r\n    const itemData = props.location.item;\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    let userObj\r\n\r\n    if (itemData) {\r\n        userObj = {\r\n            name: itemData.name,\r\n            price: itemData.price,\r\n            stock: itemData.stock,\r\n            category: itemData.category,\r\n            condition: itemData.condition,\r\n            weight: itemData.weight,\r\n            description: itemData.description,\r\n            length: itemData.length,\r\n            width: itemData.width,\r\n            height: itemData.height,\r\n            itemId: itemId\r\n        }\r\n    } else {\r\n        userObj = {\r\n            name: '',\r\n            price: 0,\r\n            stock: 0,\r\n            category: '',\r\n            condition: '',\r\n            weight: 0,\r\n            description: '',\r\n            length: 0,\r\n            width: 0,\r\n            height: 0,\r\n            itemId: itemId\r\n        }\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(editItem, userObj)\r\n\r\n    const [updateItem, { }] = useMutation(UPDATE_ITEM_MUTATION, {\r\n        update(_, { data: { updateItem: updatedItem } }) {\r\n            console.log(\"no errors\")\r\n            setSave(true)\r\n            setErrors({})\r\n            window.location.href = '/myStore/myItemsList'\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n            setSave(true)\r\n            console.log(values)\r\n\r\n        },\r\n        variables: values,\r\n    })\r\n\r\n    function editItem() {\r\n        values.price = parseInt(values.price)\r\n        values.stock = parseInt(values.stock)\r\n        values.weight = parseInt(values.weight)\r\n        values.length = parseInt(values.length)\r\n        values.width = parseInt(values.width)\r\n        values.height = parseInt(values.height)\r\n        updateItem()\r\n    }\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    let postMarkup = (\r\n        <Grid centered stackable>\r\n            <Grid.Column width={12}>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Image' />\r\n                    <Card.Content>\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button\r\n                            fluid\r\n                            color='standard'\r\n                            size='small'\r\n                        >\r\n                            <Icon name=\"plus\"></Icon>\r\n                            add Image\r\n                            </Button>\r\n                    </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Details' />\r\n                    <Card.Content extra>\r\n                        <Form size='small' onSubmit={onSubmit} noValidate noValidate>\r\n                            <Form.Input\r\n                                fluid\r\n                                placeholder='Item Name'\r\n                                label='Item Name'\r\n                                value={values.name}\r\n                                name=\"name\"\r\n                                onChange={onChange}\r\n                            />\r\n                            <Form.Group inline>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Category'\r\n                                    label='Category'\r\n                                    onChange={onChange}\r\n                                    name=\"category\"\r\n                                    control='select'\r\n                                    value={values.category}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='sparepart'>Sparepart</option>\r\n                                    <option value='accessories'>Accessories</option>\r\n                                    <option value='apparel'>Apparel</option>\r\n                                </Form.Field>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Condition'\r\n                                    label='Condition'\r\n                                    onChange={onChange}\r\n                                    name=\"condition\"\r\n                                    control='select'\r\n                                    value={values.condition}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='new'>New</option>\r\n                                    <option value='used'>Used</option>\r\n                                </Form.Field>\r\n                            </Form.Group>\r\n                            <Form.Input\r\n                                fluid\r\n                                iconPosition='left'\r\n                                placeholder='Item Description'\r\n                                label='Description'\r\n                                control={TextArea}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                onChange={onChange}\r\n\r\n                            />\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Rp'\r\n                                    label='Price'\r\n                                    value={values.price}\r\n                                    name=\"price\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Amount Item'\r\n                                    label='Amount Item'\r\n                                    value={values.stock}\r\n                                    name=\"stock\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={100}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='kg'\r\n                                    label='Weight'\r\n                                    value={parseInt(values.weight)}\r\n                                    name=\"weight\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={10}\r\n                                    min={1}\r\n\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Length'\r\n                                    value={values.length}\r\n                                    name=\"length\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Width'\r\n                                    value={values.width}\r\n                                    name=\"width\"\r\n                                    type=\"number\"\r\n                                    max={1000}\r\n                                    min={1}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Height'\r\n                                    value={values.height}\r\n                                    name=\"height\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                size='small'\r\n                            >\r\n                                Save Item\r\n                            </Button>\r\n                        </Form>\r\n                        {showMessage()}\r\n                    </Card.Content>\r\n                </Card>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n    return postMarkup\r\n}\r\n\r\nconst UPDATE_ITEM_MUTATION = gql`\r\n  mutation updateItem(\r\n    $name: String!\r\n    $price: Int!\r\n    $stock: Int!\r\n    $category: String!\r\n    $condition: String!\r\n    $weight: Int!\r\n    $description: String!\r\n    $length: Int!\r\n    $width: Int!\r\n    $height: Int!\r\n    $itemId: ID!\r\n  ) {\r\n    updateItem(itemId: $itemId, addItemInput:{\r\n        name: $name,\r\n        price: $price,\r\n        stock: $stock,\r\n        category: $category,\r\n        condition: $condition,\r\n        weight: $weight,\r\n        description: $description\r\n        dimension: {\r\n            length: $length,\r\n            width: $width\r\n            height: $height\r\n        },\r\n        images: [{\r\n            downloadUrl:\"\"\r\n        }]\r\n    }){\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        category\r\n        condition\r\n        weight\r\n        description\r\n        dimension {\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images {\r\n            downloadUrl\r\n        }\r\n        createdAt\r\n        bookmarkedBy{\r\n            id\r\n            userId\r\n            createdAt\r\n        }\r\n        user{\r\n            id\r\n            seller{\r\n                username\r\n                avatar\r\n                description\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n    }\r\n  \r\n`\r\n\r\nconst FETCH_ITEM_QUERY = gql`\r\n  query($itemId: ID!) {\r\n    getItem(itemId: $itemId) {\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        weight\r\n        createdAt\r\n        description\r\n        condition\r\n        category\r\n        dimension{\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images{\r\n            id\r\n            downloadUrl\r\n        }\r\n        bookmarkedBy{\r\n            id\r\n            userId\r\n            createdAt\r\n        }\r\n        user{\r\n            id\r\n            seller{\r\n                id\r\n                username\r\n            }\r\n        }\r\n    }\r\n  }\r\n`\r\n\r\nexport default EditItem\r\n","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingButton.js",["622"],"import React, { useState, useContext } from 'react';\r\nimport { Icon, Transition, Segment, Grid, Container } from 'semantic-ui-react';\r\nimport { AuthContext } from '../../context/auth';\r\nimport ChatFloatingCard from './ChatFloatingCard';\r\n\r\nfunction ChatFloatingButton() {\r\n    const [ visible, setVisible ] = useState(true)\r\n    const toggleVisibility = () => {setVisible(!visible)}\r\n    const { user } = useContext(AuthContext);\r\n    \r\n    const style = {\r\n        cursor: 'pointer',\r\n        borderRadius: 26,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    };\r\n\r\n    const cardStyle = {\r\n        width:560,\r\n        height:390,\r\n        borderRadius: 12,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000\r\n    };\r\n\r\n    const spanStyle = { fontSize: 14, fontWeight: 'bold'};\r\n\r\n    let chatFloatingMarkup  = (<br/>)\r\n    if (user !== null) {\r\n        chatFloatingMarkup = ( \r\n            <Container>\r\n                <Transition visible={visible} animation='scale' duration={500}>\r\n                    <Segment onClick={toggleVisibility} floated=\"right\" raised=\"true\" style={style}>\r\n                        <Icon color=\"teal\" size=\"large\" name=\"discussions\"/>\r\n                        <span style={spanStyle}>Chat</span>\r\n                    </Segment>\r\n                </Transition>\r\n                <Transition visible={!visible} animation='scale' duration={500}>\r\n                    <Segment style={cardStyle}>\r\n                        <ChatFloatingCard onClose={toggleVisibility}/>\r\n                    </Segment>\r\n                </Transition>\r\n            </Container>\r\n            )\r\n    }\r\n    return chatFloatingMarkup;\r\n}\r\nexport default ChatFloatingButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingCard.js",["623","624","625","626","627","628"],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Checkout.js",["629","630"],"import React from 'react';\r\nimport { Grid, Ref, Message, Card } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport CheckoutCard from '../components/CheckoutCard';\r\nimport ItemSummaryCheckout from '../components/ItemSummaryCheckout';\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction Checkout() {\r\n    const contextRef = React.createRef();\r\n\r\n    const { loading, data, refetch } = useQuery(FETCH_USER_CART_QUERY)\r\n    let { getUserCartItems: cartItems } = data ? data : []\r\n\r\n    console.log(cartItems)\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(cartItems)\r\n\r\n    let cartMarkup = (\r\n        <>\r\n            <br></br>\r\n            <Grid.Column width={16}><h1>Checkout</h1></Grid.Column>\r\n            <>\r\n                <Message\r\n                    error\r\n                    icon='cart'\r\n                    header='You dont have items in cart'\r\n                    content='add items to cart'\r\n                    style={{ marginBottom: 202 }}\r\n                />\r\n            </>\r\n        </>\r\n    )\r\n    if (!loading) {\r\n        if (size > 0) {\r\n            let group = cartItems.reduce((r, a) => {\r\n                r[a.item.user.id] = [...r[a.item.user.id] || [], a];\r\n                return r;\r\n            }, {});\r\n            console.log(group)\r\n\r\n            Object.keys(group).map(function (key, index) {\r\n                console.log(group[key])\r\n            })\r\n            cartMarkup = (\r\n                <Ref innerRef={contextRef}>\r\n                    <Grid stackable>\r\n                        <Grid.Column width={16}><h2>Checkout</h2></Grid.Column>\r\n                        <Grid.Column width={12} >\r\n                            <h3>Shipping Address</h3>\r\n                            <Card fluid color=\"teal\">\r\n                                <Card.Content>\r\n                                    <h4>Muhammad Gebby Geovany</h4>\r\n                                    <div>081809195559</div>\r\n                                    <p>komplek pasanggrahan indah blok 17 no.8 Ujungberung, Kota Bandung, 40617</p>\r\n                                </Card.Content>\r\n                            </Card>\r\n                            <h3>Items</h3>\r\n                            {group &&\r\n                                Object.keys(group).map((key, index) =>\r\n                                (\r\n                                    <CheckoutCard cartItem={group[key]}></CheckoutCard>\r\n                                )\r\n                                )\r\n                            }\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4}>\r\n                            <ItemSummaryCheckout contextRef={contextRef}></ItemSummaryCheckout>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Ref>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n    return cartMarkup\r\n}\r\n\r\nexport default Checkout;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCheckout.js",["631"],"import React, { useState } from 'react';\r\nimport { Card, Sticky, Dropdown, Divider, Button, List, Header } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction ItemSummaryCheckout({ contextRef }) {\r\n\r\n    const options = [\r\n        {\r\n            key: 1,\r\n            text: 'J&t REG',\r\n            value: 1,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>J&t REG</Header>\r\n                    <span>Rp10.000</span>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            key: 2,\r\n            text: 'Si Cepat Halu',\r\n            value: 2,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>Si Cepat Halu</Header>\r\n                    <span>$10.99</span>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            key: 3,\r\n            text: 'Anter Aja',\r\n            value: 3,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>Anter Aja</Header>\r\n                    <span>$10.99</span>\r\n                </>\r\n            ),\r\n        },\r\n    ]\r\n\r\n\r\n    return (\r\n        <Sticky context={contextRef} offset={130}>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shipping\" />\r\n                <Card.Content>\r\n                    <Dropdown selection fluid options={options} placeholder='Shipment' />\r\n                </Card.Content>\r\n            </Card>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shopping Summary\" />\r\n                <Card.Content>\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp100.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item (x2)</List.Content>\r\n                            <List.Content floated='right'>10.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Shipping Cost</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp200.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}><h4>Sub Total</h4></List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Button fluid color=\"teal\" as={Link} to=\"/checkout\">Pay</Button>\r\n                </Card.Content>\r\n            </Card>\r\n        </Sticky>\r\n    )\r\n}\r\nexport default ItemSummaryCheckout","D:\\SKRIPSI\\gowes\\client\\src\\components\\CheckoutCard.js",["632","633"],"import React from 'react';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport ItemCheckoutCard from './ItemCheckoutCard';\r\n\r\n\r\nfunction CheckoutCard({ cartItem }) {\r\n\r\n    console.log(cartItem)\r\n\r\n\r\n    // console.log(id)\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content>\r\n                <h4>{cartItem[0].item.user.seller.username}</h4>\r\n            </Card.Content>\r\n            {cartItem &&\r\n                cartItem.map((item) => (\r\n                    <ItemCheckoutCard item={item}></ItemCheckoutCard>\r\n                ))}\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\n\r\nexport default CheckoutCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCheckoutCard.js",["634","635","636","637","638","639","640","641","642","643","644"],"import React, { useState } from 'react';\r\nimport { Card, Grid, Form, Checkbox, Image, Button, Icon, List, Input } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\nfunction ItemCheckoutCard({ item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(item.amountItem)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    console.log(item.item.stock)\r\n\r\n    console.log(item.name)\r\n\r\n    const [deleteItemCart] = useMutation(DELETE_CART_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            // TODO: remove post cache\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: data.getUserCartItems.filter(cart => cart.id !== item.id)\r\n                }\r\n            })\r\n        },\r\n        variables: { cartId: item.id }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card.Content>\r\n                <Grid doubling>\r\n                    <Grid.Column width={2} verticalAlign=\"middle\" style={{ padding: 5, marginLeft: 10 }} >\r\n                        <Image\r\n                            fluid\r\n                            centered\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            as={Link} to={`/items/${item.item.id}`}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} style={{ marginTop: 5 }}>\r\n                        <Grid.Row><h4 >{item.item.name}</h4></Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <h4 style={{ color: 'teal' }}>Rp{item.item.price}</h4>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                           <div>2 item (10gr) </div>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n        </>\r\n    );\r\n}\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\nexport default ItemCheckoutCard;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Register.js",["645"],"import React, { useContext, useState } from 'react'\r\nimport { Button, Form, Grid, Header, Segment, Message } from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { AuthContext } from '../../context/auth'\r\nimport { useForm } from '../../util/hooks'\r\n\r\nfunction Register(props) {\r\n    const context = useContext(AuthContext)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { onChange, onSubmit, values } = useForm(registerUser, {\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        email: '',\r\n    })\r\n\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data: { register: userData } }) {\r\n            context.login(userData)\r\n            props.history.push('/')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function registerUser() {\r\n        addUser()\r\n    }\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ height: '100vh', marginTop: 100 }}>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Header color='standard' textAlign='center'>\r\n                    <span className=\"logoLogin\">Register account</span>\r\n                </Header>\r\n                <Form size='large' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                    <Segment style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='mail'\r\n                            iconPosition='left'\r\n                            placeholder='Email'\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            error={errors.email ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='user'\r\n                            iconPosition='left'\r\n                            placeholder='Name'\r\n                            name=\"name\"\r\n                            value={values.name}\r\n                            error={errors.name ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Password'\r\n                            type='password'\r\n                            name=\"password\"\r\n                            value={values.password}\r\n                            error={errors.password ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Confirm Password'\r\n                            type='password'\r\n                            name=\"confirmPassword\"\r\n                            value={values.confirmPassword}\r\n                            error={errors.confirmPassword ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n\r\n                        <Button color='secondary' fluid size='large'>\r\n                            Register\r\n                        </Button>\r\n                    </Segment>\r\n                </Form>\r\n                {Object.keys(errors).length > 0 && (\r\n                    <div className='ui error message'>\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map(value => (\r\n                                <li key={value}>{value}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $name: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        name: $name\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n        id\r\n        email\r\n        token\r\n    }\r\n  }\r\n`\r\n\r\nexport default Register;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Login.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\MessageListCard.js",["646","647","648"],"D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatListCard.js",["649","650"],"D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js",[],"E:\\node-project\\new-gowes\\client\\src\\index.js",[],["651","652"],"E:\\node-project\\new-gowes\\client\\src\\reportWebVitals.js",[],"E:\\node-project\\new-gowes\\client\\src\\ApolloProvider.js",[],"E:\\node-project\\new-gowes\\client\\src\\App.js",[],"E:\\node-project\\new-gowes\\client\\src\\context\\auth.js",[],"E:\\node-project\\new-gowes\\client\\src\\util\\AuthRoute.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\Event.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\Home.js",["653","654"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport FilterBar from '../components/FilterBar';\r\nimport { FETCH_ITEMS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data, refetch } = useQuery(FETCH_ITEMS_QUERY)\r\n  const { getItems: items } = data ? data : []\r\n\r\n\r\n  console.log(items)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Row className=\"page-title\">\r\n        <FilterBar></FilterBar>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {!loading ? (\r\n          <>\r\n            <Transition.Group duration={1000}>\r\n              {items &&\r\n                items.map((item) => (\r\n                  <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                    <ShopCard item={item} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          </>\r\n        ) : (\r\n            <h1>Loading posts..</h1>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","E:\\node-project\\new-gowes\\client\\src\\pages\\Bookmark.js",["655","656"],"E:\\node-project\\new-gowes\\client\\src\\pages\\SinglePost.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\Cart.js",["657","658","659"],"E:\\node-project\\new-gowes\\client\\src\\pages\\MyStore.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\ItemDetail.js",["660","661","662"],"import React, { useContext } from 'react';\r\nimport { FETCH_ITEM_QUERY, FETCH_CART_QUERY } from '../util/graphql';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Ref, Rail } from 'semantic-ui-react';\r\n\r\n\r\nimport ItemTransactionCard from '../components/ItemTransactionCard'\r\nimport ManageItemSticky from '../components/ManageItemSticky'\r\nimport ItemDetailCard from '../components/ItemDetailCard'\r\nimport ItemImagesCard from '../components/ItemImagesCard'\r\nimport ItemReviewsCard from '../components/ItemReviewsCard'\r\nimport ReviewSummaryCard from '../components/ReviewSummaryCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction ItemDetail(props) {\r\n  console.log(props)\r\n  const itemId = props.props.match.params.itemId;\r\n  const context = useContext(AuthContext);\r\n  const contextRef = React.createRef();\r\n  const imageContextRef = React.createRef();\r\n  const { loading, data: itemData, data: reviewData } = useQuery(FETCH_ITEM_QUERY, {\r\n    variables: {\r\n      itemId: itemId\r\n    }\r\n  })\r\n  const { getItem: item } = itemData ? itemData : []\r\n  const { getItemReviews: reviews } = reviewData ? reviewData : []\r\n\r\n  let postMarkup = (<p>Loading item..</p>);\r\n  if (item) {\r\n    postMarkup = (\r\n      <Ref innerRef={contextRef}>\r\n        <Grid>\r\n          <Grid.Column width={12}>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <Ref innerRef={imageContextRef}>\r\n                <Grid>\r\n                  <Grid.Column width={6}>\r\n                    <ItemImagesCard contextRef={imageContextRef} images={item.images} />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={10} style={{ paddingTop: 50 }}>\r\n                    <ItemDetailCard item={item} />\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Ref>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <ReviewSummaryCard />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <ItemReviewsCard reviews={reviews} />\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={4}>\r\n            {context.user ? (context.user.id !== item.user.id ? (\r\n              <ItemTransactionCard contextRef={contextRef} item={item} onChatVisible={props.onChatVisible}/>\r\n            ) : (\r\n                <ManageItemSticky contextRef={contextRef} item={item} />\r\n              )):(<div></div>)}\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Ref>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nexport default ItemDetail;","E:\\node-project\\new-gowes\\client\\src\\pages\\Profile.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\SellerProfile.js",["663"],"E:\\node-project\\new-gowes\\client\\src\\pages\\AddItem.js",["664","665","666"],"E:\\node-project\\new-gowes\\client\\src\\pages\\Checkout.js",["667","668"],"E:\\node-project\\new-gowes\\client\\src\\pages\\Authentication\\Login.js",[],"E:\\node-project\\new-gowes\\client\\src\\pages\\Authentication\\Register.js",["669"],"E:\\node-project\\new-gowes\\client\\src\\pages\\EditItem.js",["670","671","672"],"E:\\node-project\\new-gowes\\client\\src\\components\\Footer.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\EditMyStoreDetailsCard.js",["673"],"E:\\node-project\\new-gowes\\client\\src\\components\\EditProfileCard.js",["674"],"E:\\node-project\\new-gowes\\client\\src\\components\\NavBar.js",["675"],"import React, { useContext, useState } from 'react'\r\nimport { Menu, Dropdown, Button, Segment, Image, Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IoMdBicycle } from 'react-icons/io';\r\n\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { user, logout } = useContext(AuthContext)\r\n    const pathname = window.location.pathname\r\n    const path = pathname === '/' ? 'profile' : pathname.substr(1)\r\n\r\n    const [activeItem, setActiveItem] = useState(path)\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n        if(name==='cart'){\r\n            window.location.href = '/cart'\r\n        }else if(name==='bookmark'){\r\n            window.location.href = '/wishList'\r\n        }else if(name==='login'){\r\n            window.location.href = '/login'\r\n        }else if(name==='home'||'shop'){\r\n            window.location.href = '/'\r\n        }\r\n    }\r\n    const handleItemHover = () => {\r\n        // handleItemClick()\r\n        props.onDimmed()\r\n    }\r\n\r\n    const navBar = user ? (\r\n\r\n        // logged in navbar\r\n        <Segment>\r\n            <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                <Menu size=\"large\" fluid inverted secondary>\r\n                    <Menu.Item></Menu.Item>\r\n                    <Menu.Item\r\n                        active={activeItem === 'home'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    >\r\n                        <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                        <div className=\"logo\">Gowes</div>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        name='shop'\r\n                        active={activeItem === 'shop'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    />\r\n                    <Menu.Item\r\n                        name='event'\r\n                        active={activeItem === 'event'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/event\"\r\n                    />\r\n\r\n\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            name='bookmark'\r\n                            active={activeItem === 'bookmark'}\r\n                            // onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/wishList\"\r\n                        >\r\n                            <MyPopup content=\"Wishlist\">\r\n                                <Icon name=\"heart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='cart'\r\n                            active={activeItem === 'cart'}\r\n                            // onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/cart\"\r\n                        >\r\n                            <MyPopup content=\"Cart\">\r\n                                <Icon name=\"cart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        >\r\n                            <Image circular src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\" style={{ height: 30, marginRight: 0 }} verticalAlign='middle' />\r\n                            <Dropdown item text={user.name} style={{ marginLeft: 0 }}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to=\"/profile/profileCard\"><Icon name=\"user\"/>My Profile</Dropdown.Item>\r\n                                    <Dropdown.Item as={Link} to=\"/myStore/myStoreDetailsCard\"><Icon name=\"bicycle\"/>My Store</Dropdown.Item>\r\n                                    {/* <Dropdown.Item>Transaksi</Dropdown.Item> */}\r\n                                    <Dropdown.Item as={Link} to=\"/\" name='logout' onClick={logout}><Icon name=\"sign out\" color=\"red\" /> Logout</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item></Menu.Item>\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </div>\r\n        </Segment>\r\n   \r\n   ) : (\r\n        // guest navbar\r\n            <Segment inverted>\r\n                <div className=\"ui huge top inverted fixed menu \" style={{ height: 80,zIndex: 1100 }}>\r\n                    <Menu fluid inverted secondary size='large'>\r\n                        <Menu.Item></Menu.Item>\r\n                        <Menu.Item\r\n                            active={activeItem === ''}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        >\r\n                            <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                            <div className=\"logo\">Gowes</div>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='shop'\r\n                            active={activeItem === 'shop'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        />\r\n                        <Menu.Item\r\n                            name='event'\r\n                            active={activeItem === 'event'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/event\"\r\n                        />\r\n\r\n\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                <Button\r\n                                    color='teal'\r\n                                    inverted\r\n                                    name='login'\r\n                                    active={activeItem === 'login'}\r\n                                    onClick={handleItemClick}\r\n                                    as={Link}\r\n                                    to=\"/login\"\r\n                                    style={{ marginRight: 10 }}\r\n                                >\r\n                                    Sign In\r\n                            </Button>\r\n                            </Menu.Item>\r\n                            <Menu.Item></Menu.Item>\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </div>\r\n            </Segment>\r\n\r\n        )\r\n    return navBar\r\n}\r\n\r\nexport default NavBar","E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatFloatingButton.js",["676","677","678"],"import React, { useState, useContext } from 'react';\r\nimport { Icon, Transition, Segment, Grid, Container } from 'semantic-ui-react';\r\nimport { AuthContext } from '../../context/auth';\r\nimport ChatFloatingCard from './ChatFloatingCard';\r\n\r\nfunction ChatFloatingButton({ isChatVisible, onChatVisible }) {\r\n    const [ visible, setVisible ] = useState(true)\r\n    // const toggleVisibility = () => {setVisible(!visible)}\r\n    const toggleVisibility = () => {onChatVisible()}\r\n    const { user } = useContext(AuthContext);\r\n    \r\n    const style = {\r\n        cursor: 'pointer',\r\n        borderRadius: 26,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    };\r\n\r\n    const cardStyle = {\r\n        width:560,\r\n        height:390,\r\n        borderRadius: 12,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000\r\n    };\r\n\r\n    const spanStyle = { fontSize: 14, fontWeight: 'bold'};\r\n\r\n    let chatFloatingMarkup  = (<br/>)\r\n    if (user !== null) {\r\n        chatFloatingMarkup = ( \r\n            <Container>\r\n                <Transition visible={!isChatVisible} animation='scale' duration={500}>\r\n                    <Segment onClick={toggleVisibility} floated=\"right\" raised=\"true\" style={style}>\r\n                        <Icon color=\"teal\" size=\"large\" name=\"discussions\"/>\r\n                        <span style={spanStyle}>Chat</span>\r\n                    </Segment>\r\n                </Transition>\r\n                <Transition visible={isChatVisible} animation='scale' duration={500}>\r\n                    <Segment style={cardStyle}>\r\n                        <ChatFloatingCard onClose={toggleVisibility}/>\r\n                    </Segment>\r\n                </Transition>\r\n            </Container>\r\n            )\r\n    }\r\n    return chatFloatingMarkup;\r\n}\r\nexport default ChatFloatingButton","E:\\node-project\\new-gowes\\client\\src\\components\\PostCard.js",["679"],"E:\\node-project\\new-gowes\\client\\src\\components\\PostForm.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\ShopCard.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\FilterBar.js",[],"E:\\node-project\\new-gowes\\client\\src\\util\\graphql.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatFloatingCard.js",["680","681","682","683","684","685"],"import React, { useContext, useState } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  Icon,\r\n  Grid,\r\n  Segment,\r\n  List,\r\n  Form,\r\n  Image,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport ChatListCard from \"./ChatListCard\";\r\nimport MessageListCard from \"./MessageListCard\";\r\nimport { FETCH_CHATS_QUERY } from \"../../util/graphql\";\r\nimport { AuthContext } from \"../../context/auth\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { useForm } from \"../../util/hooks\";\r\n\r\nfunction ChatFloatingCard(props) {\r\n  const { user } = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n  const { loading, data } = useQuery(FETCH_CHATS_QUERY);\r\n  const { getChats: chats } = data ? data : [];\r\n  const [currentChat, setCurrentChat] = useState({\r\n    id: \"\",\r\n    users: [{ seller: { username: \"\" } }],\r\n  });\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const setChat = (chat) => setCurrentChat(chat);\r\n\r\n  const receiver = (users) => {\r\n    let userReceiver;\r\n    if (users[0].id != user.id) {\r\n      userReceiver = users[0];\r\n    } else {\r\n      userReceiver = users[1];\r\n    }\r\n    return userReceiver;\r\n  };\r\n\r\n  const topLeftBar = {\r\n    margin: 0,\r\n    borderTopLeftRadius: 12,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const topRightBar = {\r\n    margin: 0,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 12,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const rightBottomContent = {\r\n    margin: 0,\r\n    padding: 0,\r\n    height: 50,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 12,\r\n  };\r\n\r\n  let obj = { id: 1 };\r\n  let objs = [];\r\n  for (var i = 0; i < 4; i++) {\r\n    objs.push(obj);\r\n  }\r\n\r\n  console.log(currentChat.id);\r\n\r\n  const { onChange, onSubmit, values } = useForm(sendMessage, {\r\n    content: \"\",\r\n  });\r\n\r\n  console.log(values);\r\n\r\n  const [addMessage] = useMutation(ADD_MESSAGE, {\r\n    update(_, { data: { addMessage: message } }) {\r\n      // context.login(userData)\r\n      // props.history.push('/')\r\n      console.log(\"succsess\");\r\n      values.content = \"\";\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n      console.log(\"error\");\r\n    },\r\n    variables: {\r\n      chatId: currentChat.id,\r\n      receiverUserId: \"\",\r\n      content: values.content,\r\n    },\r\n  });\r\n\r\n  function sendMessage() {\r\n    addMessage();\r\n    console.log(values);\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={5} style={{ padding: 0 }}>\r\n        <Segment style={topLeftBar}>\r\n          <List>\r\n            <List.Item>\r\n              <List.Content style={{ fontWeight: \"bold\" }}>Chat</List.Content>\r\n            </List.Item>\r\n          </List>\r\n        </Segment>\r\n        {!loading ? (\r\n          <ChatListCard chats={chats} user={user} setChat={setChat} />\r\n        ) : (\r\n          <h1>Loading chats..</h1>\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={11} style={{ padding: 0 }}>\r\n        <Segment style={topRightBar}>\r\n          <Grid>\r\n            <Grid.Column width={14}>\r\n              {currentChat.id != \"\" ? (\r\n                <List horizontal>\r\n                  <List.Item>\r\n                    <Image\r\n                      avatar\r\n                      src=\"https://react.semantic-ui.com/images/avatar/small/tom.jpg\"\r\n                    />\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    {receiver(currentChat.users).seller.username}\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    <span\r\n                      style={{\r\n                        color: \"#20B52B\",\r\n                        backgroundColor: \"#C6ECCD\",\r\n                        paddingTop: 1,\r\n                        paddingBottom: 1,\r\n                        paddingLeft: 3,\r\n                        paddingRight: 3,\r\n                        borderRadius: 6,\r\n                      }}\r\n                    >\r\n                      Seller\r\n                    </span>\r\n                  </List.Item>\r\n                </List>\r\n              ) : (\r\n                <List> </List>\r\n              )}\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n              <Icon\r\n                size=\"large\"\r\n                name=\"angle down\"\r\n                onClick={props.onClose}\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n        {currentChat.id != \"\" ? (\r\n          <MessageListCard user={user} chatId={currentChat.id} />\r\n        ) : (\r\n          <Segment style={{ height: 286, margin: 0 }}></Segment>\r\n        )}\r\n        <Segment style={rightBottomContent}>\r\n          <Form onSubmit={onSubmit}>\r\n            <Form.Group\r\n              style={{\r\n                margin: 0,\r\n                paddingTop: 4,\r\n                paddingLeft: 8,\r\n                paddingRight: 8,\r\n              }}\r\n            >\r\n              <input\r\n                style={{ borderRadius: 50 }}\r\n                width={14}\r\n                placeholder=\"Write Messages...\"\r\n                name=\"content\"\r\n                onChange={onChange}\r\n                value={values.content}\r\n              />\r\n              <Button\r\n                icon=\"send\"\r\n                circular\r\n                color=\"teal\"\r\n                style={{ marginLeft: 8 }}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst ADD_MESSAGE = gql`\r\n  mutation addMessage($chatId: ID!, $receiverUserId: ID!, $content: String!) {\r\n    addMessage(\r\n      messageInput: {\r\n        chatId: $chatId\r\n        receiverUserId: $receiverUserId\r\n        content: $content\r\n      }\r\n    ) {\r\n      id\r\n      user\r\n      content\r\n      images {\r\n        id\r\n        downloadUrl\r\n      }\r\n      sentAt\r\n    }\r\n  }\r\n`;\r\nexport default ChatFloatingCard;\r\n","E:\\node-project\\new-gowes\\client\\src\\components\\MyPopup.js",[],"E:\\node-project\\new-gowes\\client\\src\\util\\hooks.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemSummaryCheckout.js",["686"],"E:\\node-project\\new-gowes\\client\\src\\components\\SideBarSellerProfile.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\CheckoutCard.js",["687","688"],"E:\\node-project\\new-gowes\\client\\src\\components\\MyOrders.js",["689","690"],"E:\\node-project\\new-gowes\\client\\src\\components\\ProfileCard.js",["691"],"E:\\node-project\\new-gowes\\client\\src\\components\\SidebarProfile.js",[],"E:\\node-project\\new-gowes\\client\\src\\firebase\\index.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\DeleteButton.js",["692"],"E:\\node-project\\new-gowes\\client\\src\\components\\BookmarkButton.js",["693"],"E:\\node-project\\new-gowes\\client\\src\\components\\chat\\MessageListCard.js",["694","695","696","697"],"E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ChatListCard.js",["698","699"],"import React, { useState } from \"react\";\r\nimport { List, Image, Segment } from \"semantic-ui-react\";\r\n\r\nfunction ChatListCard({ chats, user, setChat }) {\r\n  let obj = { id: 1 };\r\n  let objs = [];\r\n  for (var i = 0; i < 10; i++) {\r\n    objs.push(obj);\r\n  }\r\n  const [isItemHovered, setItemHovered] = useState({\r\n    state: false,\r\n    id: -1,\r\n  });\r\n  const onMouseEnterItem = {\r\n    backgroundColor: \"#F3F4F5\",\r\n    padding: 8,\r\n    cursor: \"pointer\",\r\n  };\r\n  const onMouseLeaveItem = {\r\n    backgroundColor: \"#FFFFFF\",\r\n    padding: 8,\r\n  };\r\n  const leftContent = {\r\n    padding: 0,\r\n    margin: 0,\r\n    overflow: \"auto\",\r\n    maxHeight: 342,\r\n    height: 342,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 12,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const receiver = (users) => {\r\n    let userReceiver;\r\n    if (users[0].id != user.id) {\r\n      userReceiver = users[0];\r\n    } else {\r\n      userReceiver = users[1];\r\n    }\r\n    return userReceiver;\r\n  };\r\n\r\n  const handleItemHovered = (id, state) => {\r\n    setItemHovered({\r\n      state: state,\r\n      id: id,\r\n    });\r\n  };\r\n  return (\r\n    <Segment style={leftContent}>\r\n      <List>\r\n        {chats.map((chat, index) => (\r\n          <List.Item\r\n            key={index}\r\n            onClick={() => setChat(chat)}\r\n            onMouseEnter={() => handleItemHovered(index, true)}\r\n            onMouseLeave={() => handleItemHovered(index, false)}\r\n            style={\r\n              isItemHovered.state && isItemHovered.id == index\r\n                ? onMouseEnterItem\r\n                : onMouseLeaveItem\r\n            }\r\n          >\r\n            <Image\r\n              avatar\r\n              src=\"https://react.semantic-ui.com/images/avatar/small/tom.jpg\"\r\n            />\r\n            <List.Content>\r\n              <List.Header>{receiver(chat.users).seller.username}</List.Header>\r\n              <span\r\n                style={{\r\n                  color: \"#20B52B\",\r\n                  backgroundColor: \"#C6ECCD\",\r\n                  paddingTop: 1,\r\n                  paddingBottom: 1,\r\n                  paddingLeft: 3,\r\n                  paddingRight: 3,\r\n                  borderRadius: 6,\r\n                }}\r\n              >\r\n                Seller\r\n              </span>\r\n            </List.Content>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n  );\r\n}\r\nexport default ChatListCard;\r\n","E:\\node-project\\new-gowes\\client\\src\\components\\LikeButton.js",["700"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemCheckoutCard.js",["701","702","703","704","705","706","707","708","709","710","711"],"E:\\node-project\\new-gowes\\client\\src\\components\\CardMyOrders.js",["712"],"E:\\node-project\\new-gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemMyOrders.js",["713"],["714","715"],"E:\\node-project\\new-gowes\\client\\src\\components\\ReviewSummaryCard.js",["716","717","718","719","720"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemReviewsCard.js",["721"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemDetailCard.js",["722"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemImagesCard.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\ManageItemSticky.js",["723","724","725","726","727","728","729"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemTransactionCard.js",["730","731"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction ItemTransactionCard({ props, contextRef, item, onChatVisible }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const [addToCart] = useMutation(ADD_TO_CART_MUTATION, {\r\n        variables: { itemId: item.id, amountItem: amountItem },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: [result.data.addCartItem, ...data.getUserCartItems]\r\n                }\r\n            })\r\n\r\n            const cartItem = proxy.readQuery({\r\n                query: FETCH_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_CART_QUERY,\r\n                data: {\r\n                    getUserCartItem: cartItem.getUserCartItem\r\n                }\r\n            })\r\n\r\n            \r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n        },\r\n    })\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    console.log(visible)\r\n\r\n    function addItemToCart() {\r\n        // refetch()\r\n        addToCart()\r\n        setVisible(true)\r\n        // window.location.href='/items'\r\n        window.location.reload(false);\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <h1>loading...</h1>\r\n    )\r\n    if (!loading) {\r\n        itemMarkup = (\r\n            <>\r\n                <Sticky context={contextRef} offset={130}>\r\n                    <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content>\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                        <Icon name=\"angle down\" />\r\n                                    </List.Content>\r\n                                    <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"minus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                disabled={inCartAmount + amountItem >= item.stock}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"plus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                    </List>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Content floated='left' verticalAlign=\"middle\">\r\n                                        <Header as=\"h5\">Sub Total</Header>\r\n                                    </List.Content>\r\n                                    <List.Content floated='right'>\r\n                                        <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                    </List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n\r\n                                </List.Item>\r\n                            </List>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <div className='ui two buttons'>\r\n                                <Button animated='fade'>\r\n                                    <Button.Content visible>Buy</Button.Content>\r\n                                    <Button.Content hidden floated='left' style={{ borderRadius: 8, marginRight: 2 }}>\r\n                                        Checkout Now!\r\n                            </Button.Content>\r\n                                </Button>\r\n                                <Button color=\"teal\" animated='vertical' onClick={addItemToCart} disabled={inCartAmount === item.stock}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"cart arrow down\" />\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                        Add to Cart\r\n                            </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                            <div className='ui two buttons' style={{ marginTop: 8, marginLeft: 2 }}>\r\n                                <Button animated onClick={() => onChatVisible()}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"chat\" />{\" Chat\"}\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                                        Go to Chat?\r\n                                    </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                        </Card.Content>\r\n                    </Card>\r\n                    {visible ? (\r\n                        <Message\r\n                            positive\r\n                            onDismiss={handleDismiss}\r\n                            header='Added to cart!'\r\n                            content='Open cart menu for details.'\r\n                            style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                        />\r\n                    ) : (<div></div>)\r\n                    }\r\n\r\n                </Sticky>\r\n            </>\r\n        )\r\n    }\r\n    return itemMarkup\r\n}\r\n\r\nconst ADD_TO_CART_MUTATION = gql`\r\n    mutation addCartItem($itemId:ID!, $amountItem: Int!){\r\n        addCartItem(itemId: $itemId, note:\"\", amountItem:$amountItem)  {\r\n            note\r\n            amountItem\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default ItemTransactionCard","E:\\node-project\\new-gowes\\client\\src\\components\\SidebarStore.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\MyStoreDetailsCard.js",[],"E:\\node-project\\new-gowes\\client\\src\\components\\MyItemList.js",["732"],"E:\\node-project\\new-gowes\\client\\src\\components\\CartCard.js",["733"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemSummaryCard.js",["734","735"],"E:\\node-project\\new-gowes\\client\\src\\components\\ProgressBar.js",["736"],"E:\\node-project\\new-gowes\\client\\src\\components\\DeleteItemButton.js",["737","738"],"E:\\node-project\\new-gowes\\client\\src\\components\\MyItemsCard.js",["739"],"E:\\node-project\\new-gowes\\client\\src\\components\\ItemCartCard.js",["740","741","742","743"],{"ruleId":"744","replacedBy":"745"},{"ruleId":"746","replacedBy":"747"},{"ruleId":"748","severity":1,"message":"749","line":8,"column":17,"nodeType":"750","messageId":"751","endLine":8,"endColumn":25},{"ruleId":"748","severity":1,"message":"752","line":11,"column":11,"nodeType":"750","messageId":"751","endLine":11,"endColumn":15},{"ruleId":"748","severity":1,"message":"753","line":12,"column":26,"nodeType":"750","messageId":"751","endLine":12,"endColumn":33},{"ruleId":"748","severity":1,"message":"754","line":2,"column":44,"nodeType":"750","messageId":"751","endLine":2,"endColumn":49},{"ruleId":"748","severity":1,"message":"754","line":4,"column":33,"nodeType":"750","messageId":"751","endLine":4,"endColumn":38},{"ruleId":"748","severity":1,"message":"754","line":5,"column":31,"nodeType":"750","messageId":"751","endLine":5,"endColumn":36},{"ruleId":"748","severity":1,"message":"755","line":31,"column":11,"nodeType":"750","messageId":"751","endLine":31,"endColumn":26},{"ruleId":"748","severity":1,"message":"756","line":22,"column":12,"nodeType":"750","messageId":"751","endLine":22,"endColumn":18},{"ruleId":"748","severity":1,"message":"757","line":2,"column":30,"nodeType":"750","messageId":"751","endLine":2,"endColumn":40},{"ruleId":"748","severity":1,"message":"753","line":13,"column":26,"nodeType":"750","messageId":"751","endLine":13,"endColumn":33},{"ruleId":"758","severity":1,"message":"759","line":52,"column":30,"nodeType":"760","messageId":"761","endLine":52,"endColumn":39},{"ruleId":"748","severity":1,"message":"752","line":10,"column":11,"nodeType":"750","messageId":"751","endLine":10,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":20,"column":30,"nodeType":"764","messageId":"765","endLine":20,"endColumn":32},{"ruleId":"748","severity":1,"message":"766","line":4,"column":20,"nodeType":"750","messageId":"751","endLine":4,"endColumn":31},{"ruleId":"748","severity":1,"message":"767","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":44},{"ruleId":"748","severity":1,"message":"768","line":4,"column":21,"nodeType":"750","messageId":"751","endLine":4,"endColumn":25},{"ruleId":"748","severity":1,"message":"769","line":20,"column":11,"nodeType":"750","messageId":"751","endLine":20,"endColumn":18},{"ruleId":"770","severity":1,"message":"771","line":62,"column":33,"nodeType":"772","messageId":"765","endLine":62,"endColumn":36},{"ruleId":"770","severity":1,"message":"771","line":67,"column":27,"nodeType":"772","messageId":"765","endLine":67,"endColumn":30},{"ruleId":"748","severity":1,"message":"773","line":2,"column":45,"nodeType":"750","messageId":"751","endLine":2,"endColumn":50},{"ruleId":"748","severity":1,"message":"752","line":9,"column":13,"nodeType":"750","messageId":"751","endLine":9,"endColumn":17},{"ruleId":"748","severity":1,"message":"774","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":27},{"ruleId":"748","severity":1,"message":"775","line":6,"column":10,"nodeType":"750","messageId":"751","endLine":6,"endColumn":21},{"ruleId":"776","severity":1,"message":"777","line":119,"column":112,"nodeType":"778","endLine":119,"endColumn":122},{"ruleId":"748","severity":1,"message":"756","line":15,"column":12,"nodeType":"750","messageId":"751","endLine":15,"endColumn":18},{"ruleId":"748","severity":1,"message":"753","line":51,"column":42,"nodeType":"750","messageId":"751","endLine":51,"endColumn":49},{"ruleId":"776","severity":1,"message":"777","line":41,"column":25,"nodeType":"778","endLine":41,"endColumn":34},{"ruleId":"748","severity":1,"message":"779","line":2,"column":35,"nodeType":"750","messageId":"751","endLine":2,"endColumn":40},{"ruleId":"748","severity":1,"message":"780","line":30,"column":7,"nodeType":"750","messageId":"751","endLine":30,"endColumn":32},{"ruleId":"748","severity":1,"message":"781","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":36},{"ruleId":"748","severity":1,"message":"756","line":13,"column":12,"nodeType":"750","messageId":"751","endLine":13,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":13,"column":20,"nodeType":"750","messageId":"751","endLine":13,"endColumn":29},{"ruleId":"776","severity":1,"message":"777","line":79,"column":49,"nodeType":"778","endLine":79,"endColumn":75},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"784","line":2,"column":24,"nodeType":"750","messageId":"751","endLine":2,"endColumn":28},{"ruleId":"748","severity":1,"message":"785","line":2,"column":38,"nodeType":"750","messageId":"751","endLine":2,"endColumn":46},{"ruleId":"748","severity":1,"message":"786","line":2,"column":54,"nodeType":"750","messageId":"751","endLine":2,"endColumn":58},{"ruleId":"748","severity":1,"message":"787","line":6,"column":12,"nodeType":"750","messageId":"751","endLine":6,"endColumn":22},{"ruleId":"748","severity":1,"message":"788","line":6,"column":24,"nodeType":"750","messageId":"751","endLine":6,"endColumn":37},{"ruleId":"748","severity":1,"message":"789","line":7,"column":11,"nodeType":"750","messageId":"751","endLine":7,"endColumn":24},{"ruleId":"748","severity":1,"message":"790","line":22,"column":11,"nodeType":"750","messageId":"751","endLine":22,"endColumn":22},{"ruleId":"748","severity":1,"message":"791","line":3,"column":10,"nodeType":"750","messageId":"751","endLine":3,"endColumn":14},{"ruleId":"748","severity":1,"message":"792","line":3,"column":16,"nodeType":"750","messageId":"751","endLine":3,"endColumn":26},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"793","line":2,"column":59,"nodeType":"750","messageId":"751","endLine":2,"endColumn":66},{"ruleId":"748","severity":1,"message":"794","line":15,"column":12,"nodeType":"750","messageId":"751","endLine":15,"endColumn":19},{"ruleId":"748","severity":1,"message":"756","line":16,"column":12,"nodeType":"750","messageId":"751","endLine":16,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":16,"column":20,"nodeType":"750","messageId":"751","endLine":16,"endColumn":29},{"ruleId":"748","severity":1,"message":"795","line":18,"column":11,"nodeType":"750","messageId":"751","endLine":18,"endColumn":24},{"ruleId":"748","severity":1,"message":"769","line":20,"column":13,"nodeType":"750","messageId":"751","endLine":20,"endColumn":20},{"ruleId":"748","severity":1,"message":"753","line":20,"column":42,"nodeType":"750","messageId":"751","endLine":20,"endColumn":49},{"ruleId":"748","severity":1,"message":"754","line":4,"column":33,"nodeType":"750","messageId":"751","endLine":4,"endColumn":38},{"ruleId":"748","severity":1,"message":"796","line":6,"column":10,"nodeType":"750","messageId":"751","endLine":6,"endColumn":27},{"ruleId":"748","severity":1,"message":"769","line":15,"column":13,"nodeType":"750","messageId":"751","endLine":15,"endColumn":20},{"ruleId":"770","severity":1,"message":"771","line":51,"column":24,"nodeType":"772","messageId":"765","endLine":51,"endColumn":27},{"ruleId":"776","severity":1,"message":"777","line":141,"column":75,"nodeType":"778","endLine":141,"endColumn":85},{"ruleId":"748","severity":1,"message":"797","line":346,"column":7,"nodeType":"750","messageId":"751","endLine":346,"endColumn":23},{"ruleId":"748","severity":1,"message":"784","line":2,"column":37,"nodeType":"750","messageId":"751","endLine":2,"endColumn":41},{"ruleId":"748","severity":1,"message":"756","line":15,"column":10,"nodeType":"750","messageId":"751","endLine":15,"endColumn":16},{"ruleId":"748","severity":1,"message":"798","line":22,"column":10,"nodeType":"750","messageId":"751","endLine":22,"endColumn":17},{"ruleId":"748","severity":1,"message":"799","line":22,"column":19,"nodeType":"750","messageId":"751","endLine":22,"endColumn":29},{"ruleId":"762","severity":1,"message":"800","line":28,"column":21,"nodeType":"764","messageId":"765","endLine":28,"endColumn":23},{"ruleId":"762","severity":1,"message":"800","line":118,"column":31,"nodeType":"764","messageId":"765","endLine":118,"endColumn":33},{"ruleId":"762","severity":1,"message":"800","line":157,"column":25,"nodeType":"764","messageId":"765","endLine":157,"endColumn":27},{"ruleId":"748","severity":1,"message":"753","line":13,"column":28,"nodeType":"750","messageId":"751","endLine":13,"endColumn":35},{"ruleId":"758","severity":1,"message":"759","line":52,"column":36,"nodeType":"760","messageId":"761","endLine":52,"endColumn":45},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"781","line":2,"column":16,"nodeType":"750","messageId":"751","endLine":2,"endColumn":24},{"ruleId":"748","severity":1,"message":"780","line":27,"column":7,"nodeType":"750","messageId":"751","endLine":27,"endColumn":32},{"ruleId":"748","severity":1,"message":"801","line":2,"column":22,"nodeType":"750","messageId":"751","endLine":2,"endColumn":26},{"ruleId":"748","severity":1,"message":"781","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":36},{"ruleId":"748","severity":1,"message":"802","line":2,"column":45,"nodeType":"750","messageId":"751","endLine":2,"endColumn":51},{"ruleId":"748","severity":1,"message":"803","line":2,"column":53,"nodeType":"750","messageId":"751","endLine":2,"endColumn":57},{"ruleId":"748","severity":1,"message":"804","line":2,"column":59,"nodeType":"750","messageId":"751","endLine":2,"endColumn":63},{"ruleId":"748","severity":1,"message":"805","line":2,"column":65,"nodeType":"750","messageId":"751","endLine":2,"endColumn":70},{"ruleId":"748","severity":1,"message":"787","line":12,"column":12,"nodeType":"750","messageId":"751","endLine":12,"endColumn":22},{"ruleId":"748","severity":1,"message":"788","line":12,"column":24,"nodeType":"750","messageId":"751","endLine":12,"endColumn":37},{"ruleId":"748","severity":1,"message":"756","line":13,"column":12,"nodeType":"750","messageId":"751","endLine":13,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":13,"column":20,"nodeType":"750","messageId":"751","endLine":13,"endColumn":29},{"ruleId":"748","severity":1,"message":"806","line":19,"column":12,"nodeType":"750","messageId":"751","endLine":19,"endColumn":26},{"ruleId":"748","severity":1,"message":"793","line":2,"column":47,"nodeType":"750","messageId":"751","endLine":2,"endColumn":54},{"ruleId":"748","severity":1,"message":"807","line":7,"column":20,"nodeType":"750","messageId":"751","endLine":7,"endColumn":35},{"ruleId":"748","severity":1,"message":"753","line":12,"column":43,"nodeType":"750","messageId":"751","endLine":12,"endColumn":50},{"ruleId":"762","severity":1,"message":"800","line":59,"column":24,"nodeType":"764","messageId":"765","endLine":59,"endColumn":26},{"ruleId":"762","severity":1,"message":"800","line":37,"column":21,"nodeType":"764","messageId":"765","endLine":37,"endColumn":23},{"ruleId":"762","severity":1,"message":"763","line":61,"column":55,"nodeType":"764","messageId":"765","endLine":61,"endColumn":57},{"ruleId":"744","replacedBy":"808"},{"ruleId":"746","replacedBy":"809"},{"ruleId":"748","severity":1,"message":"752","line":11,"column":11,"nodeType":"750","messageId":"751","endLine":11,"endColumn":15},{"ruleId":"748","severity":1,"message":"753","line":12,"column":26,"nodeType":"750","messageId":"751","endLine":12,"endColumn":33},{"ruleId":"748","severity":1,"message":"752","line":10,"column":11,"nodeType":"750","messageId":"751","endLine":10,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":20,"column":30,"nodeType":"764","messageId":"765","endLine":20,"endColumn":32},{"ruleId":"748","severity":1,"message":"757","line":2,"column":30,"nodeType":"750","messageId":"751","endLine":2,"endColumn":40},{"ruleId":"748","severity":1,"message":"753","line":13,"column":26,"nodeType":"750","messageId":"751","endLine":13,"endColumn":33},{"ruleId":"758","severity":1,"message":"759","line":52,"column":30,"nodeType":"760","messageId":"761","endLine":52,"endColumn":39},{"ruleId":"748","severity":1,"message":"767","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":44},{"ruleId":"748","severity":1,"message":"768","line":4,"column":21,"nodeType":"750","messageId":"751","endLine":4,"endColumn":25},{"ruleId":"748","severity":1,"message":"769","line":21,"column":11,"nodeType":"750","messageId":"751","endLine":21,"endColumn":18},{"ruleId":"748","severity":1,"message":"769","line":15,"column":13,"nodeType":"750","messageId":"751","endLine":15,"endColumn":20},{"ruleId":"748","severity":1,"message":"774","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":27},{"ruleId":"748","severity":1,"message":"775","line":6,"column":10,"nodeType":"750","messageId":"751","endLine":6,"endColumn":21},{"ruleId":"776","severity":1,"message":"777","line":119,"column":112,"nodeType":"778","endLine":119,"endColumn":122},{"ruleId":"748","severity":1,"message":"753","line":13,"column":28,"nodeType":"750","messageId":"751","endLine":13,"endColumn":35},{"ruleId":"758","severity":1,"message":"759","line":52,"column":36,"nodeType":"760","messageId":"761","endLine":52,"endColumn":45},{"ruleId":"748","severity":1,"message":"793","line":2,"column":47,"nodeType":"750","messageId":"751","endLine":2,"endColumn":54},{"ruleId":"770","severity":1,"message":"771","line":51,"column":24,"nodeType":"772","messageId":"765","endLine":51,"endColumn":27},{"ruleId":"776","severity":1,"message":"777","line":141,"column":75,"nodeType":"778","endLine":141,"endColumn":85},{"ruleId":"748","severity":1,"message":"797","line":346,"column":7,"nodeType":"750","messageId":"751","endLine":346,"endColumn":23},{"ruleId":"770","severity":1,"message":"771","line":62,"column":33,"nodeType":"772","messageId":"765","endLine":62,"endColumn":36},{"ruleId":"770","severity":1,"message":"771","line":67,"column":27,"nodeType":"772","messageId":"765","endLine":67,"endColumn":30},{"ruleId":"748","severity":1,"message":"755","line":31,"column":11,"nodeType":"750","messageId":"751","endLine":31,"endColumn":26},{"ruleId":"748","severity":1,"message":"784","line":2,"column":37,"nodeType":"750","messageId":"751","endLine":2,"endColumn":41},{"ruleId":"748","severity":1,"message":"794","line":7,"column":13,"nodeType":"750","messageId":"751","endLine":7,"endColumn":20},{"ruleId":"748","severity":1,"message":"810","line":7,"column":22,"nodeType":"750","messageId":"751","endLine":7,"endColumn":32},{"ruleId":"748","severity":1,"message":"754","line":2,"column":44,"nodeType":"750","messageId":"751","endLine":2,"endColumn":49},{"ruleId":"748","severity":1,"message":"756","line":22,"column":10,"nodeType":"750","messageId":"751","endLine":22,"endColumn":16},{"ruleId":"748","severity":1,"message":"798","line":29,"column":10,"nodeType":"750","messageId":"751","endLine":29,"endColumn":17},{"ruleId":"748","severity":1,"message":"799","line":29,"column":19,"nodeType":"750","messageId":"751","endLine":29,"endColumn":29},{"ruleId":"762","severity":1,"message":"800","line":35,"column":21,"nodeType":"764","messageId":"765","endLine":35,"endColumn":23},{"ruleId":"762","severity":1,"message":"800","line":126,"column":31,"nodeType":"764","messageId":"765","endLine":126,"endColumn":33},{"ruleId":"762","severity":1,"message":"800","line":167,"column":25,"nodeType":"764","messageId":"765","endLine":167,"endColumn":27},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"781","line":2,"column":16,"nodeType":"750","messageId":"751","endLine":2,"endColumn":24},{"ruleId":"748","severity":1,"message":"780","line":27,"column":7,"nodeType":"750","messageId":"751","endLine":27,"endColumn":32},{"ruleId":"748","severity":1,"message":"791","line":3,"column":10,"nodeType":"750","messageId":"751","endLine":3,"endColumn":14},{"ruleId":"748","severity":1,"message":"792","line":3,"column":16,"nodeType":"750","messageId":"751","endLine":3,"endColumn":26},{"ruleId":"748","severity":1,"message":"766","line":4,"column":20,"nodeType":"750","messageId":"751","endLine":4,"endColumn":31},{"ruleId":"748","severity":1,"message":"754","line":4,"column":33,"nodeType":"750","messageId":"751","endLine":4,"endColumn":38},{"ruleId":"748","severity":1,"message":"756","line":22,"column":12,"nodeType":"750","messageId":"751","endLine":22,"endColumn":18},{"ruleId":"748","severity":1,"message":"807","line":7,"column":20,"nodeType":"750","messageId":"751","endLine":7,"endColumn":35},{"ruleId":"748","severity":1,"message":"811","line":8,"column":8,"nodeType":"750","messageId":"751","endLine":8,"endColumn":26},{"ruleId":"748","severity":1,"message":"753","line":12,"column":43,"nodeType":"750","messageId":"751","endLine":12,"endColumn":50},{"ruleId":"762","severity":1,"message":"800","line":81,"column":24,"nodeType":"764","messageId":"765","endLine":81,"endColumn":26},{"ruleId":"762","severity":1,"message":"800","line":37,"column":21,"nodeType":"764","messageId":"765","endLine":37,"endColumn":23},{"ruleId":"762","severity":1,"message":"763","line":61,"column":55,"nodeType":"764","messageId":"765","endLine":61,"endColumn":57},{"ruleId":"748","severity":1,"message":"754","line":5,"column":31,"nodeType":"750","messageId":"751","endLine":5,"endColumn":36},{"ruleId":"748","severity":1,"message":"801","line":2,"column":22,"nodeType":"750","messageId":"751","endLine":2,"endColumn":26},{"ruleId":"748","severity":1,"message":"781","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":36},{"ruleId":"748","severity":1,"message":"802","line":2,"column":45,"nodeType":"750","messageId":"751","endLine":2,"endColumn":51},{"ruleId":"748","severity":1,"message":"803","line":2,"column":53,"nodeType":"750","messageId":"751","endLine":2,"endColumn":57},{"ruleId":"748","severity":1,"message":"804","line":2,"column":59,"nodeType":"750","messageId":"751","endLine":2,"endColumn":63},{"ruleId":"748","severity":1,"message":"805","line":2,"column":65,"nodeType":"750","messageId":"751","endLine":2,"endColumn":70},{"ruleId":"748","severity":1,"message":"787","line":12,"column":12,"nodeType":"750","messageId":"751","endLine":12,"endColumn":22},{"ruleId":"748","severity":1,"message":"788","line":12,"column":24,"nodeType":"750","messageId":"751","endLine":12,"endColumn":37},{"ruleId":"748","severity":1,"message":"756","line":13,"column":12,"nodeType":"750","messageId":"751","endLine":13,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":13,"column":20,"nodeType":"750","messageId":"751","endLine":13,"endColumn":29},{"ruleId":"748","severity":1,"message":"806","line":19,"column":12,"nodeType":"750","messageId":"751","endLine":19,"endColumn":26},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"744","replacedBy":"812"},{"ruleId":"746","replacedBy":"813"},{"ruleId":"748","severity":1,"message":"785","line":2,"column":38,"nodeType":"750","messageId":"751","endLine":2,"endColumn":46},{"ruleId":"748","severity":1,"message":"786","line":2,"column":54,"nodeType":"750","messageId":"751","endLine":2,"endColumn":58},{"ruleId":"748","severity":1,"message":"787","line":6,"column":12,"nodeType":"750","messageId":"751","endLine":6,"endColumn":22},{"ruleId":"748","severity":1,"message":"788","line":6,"column":24,"nodeType":"750","messageId":"751","endLine":6,"endColumn":37},{"ruleId":"748","severity":1,"message":"789","line":7,"column":11,"nodeType":"750","messageId":"751","endLine":7,"endColumn":24},{"ruleId":"748","severity":1,"message":"779","line":2,"column":35,"nodeType":"750","messageId":"751","endLine":2,"endColumn":40},{"ruleId":"776","severity":1,"message":"777","line":41,"column":25,"nodeType":"778","endLine":41,"endColumn":34},{"ruleId":"748","severity":1,"message":"793","line":2,"column":59,"nodeType":"750","messageId":"751","endLine":2,"endColumn":66},{"ruleId":"748","severity":1,"message":"794","line":15,"column":12,"nodeType":"750","messageId":"751","endLine":15,"endColumn":19},{"ruleId":"748","severity":1,"message":"756","line":16,"column":12,"nodeType":"750","messageId":"751","endLine":16,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":16,"column":20,"nodeType":"750","messageId":"751","endLine":16,"endColumn":29},{"ruleId":"748","severity":1,"message":"795","line":18,"column":11,"nodeType":"750","messageId":"751","endLine":18,"endColumn":24},{"ruleId":"748","severity":1,"message":"769","line":20,"column":13,"nodeType":"750","messageId":"751","endLine":20,"endColumn":20},{"ruleId":"748","severity":1,"message":"753","line":20,"column":42,"nodeType":"750","messageId":"751","endLine":20,"endColumn":49},{"ruleId":"748","severity":1,"message":"756","line":15,"column":12,"nodeType":"750","messageId":"751","endLine":15,"endColumn":18},{"ruleId":"748","severity":1,"message":"753","line":51,"column":42,"nodeType":"750","messageId":"751","endLine":51,"endColumn":49},{"ruleId":"748","severity":1,"message":"773","line":2,"column":45,"nodeType":"750","messageId":"751","endLine":2,"endColumn":50},{"ruleId":"748","severity":1,"message":"780","line":30,"column":7,"nodeType":"750","messageId":"751","endLine":30,"endColumn":32},{"ruleId":"748","severity":1,"message":"783","line":1,"column":17,"nodeType":"750","messageId":"751","endLine":1,"endColumn":25},{"ruleId":"748","severity":1,"message":"784","line":2,"column":24,"nodeType":"750","messageId":"751","endLine":2,"endColumn":28},{"ruleId":"748","severity":1,"message":"790","line":22,"column":11,"nodeType":"750","messageId":"751","endLine":22,"endColumn":22},{"ruleId":"748","severity":1,"message":"754","line":4,"column":33,"nodeType":"750","messageId":"751","endLine":4,"endColumn":38},{"ruleId":"748","severity":1,"message":"796","line":6,"column":10,"nodeType":"750","messageId":"751","endLine":6,"endColumn":27},{"ruleId":"748","severity":1,"message":"752","line":9,"column":13,"nodeType":"750","messageId":"751","endLine":9,"endColumn":17},{"ruleId":"748","severity":1,"message":"781","line":2,"column":28,"nodeType":"750","messageId":"751","endLine":2,"endColumn":36},{"ruleId":"748","severity":1,"message":"756","line":13,"column":12,"nodeType":"750","messageId":"751","endLine":13,"endColumn":18},{"ruleId":"748","severity":1,"message":"782","line":13,"column":20,"nodeType":"750","messageId":"751","endLine":13,"endColumn":29},{"ruleId":"776","severity":1,"message":"777","line":79,"column":49,"nodeType":"778","endLine":79,"endColumn":75},"no-native-reassign",["814"],"no-negated-in-lhs",["815"],"no-unused-vars","'HttpLink' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'refetch' is assigned a value but never used.","'Popup' is defined but never used.","'handleItemHover' is assigned a value but never used.","'errors' is assigned a value but never used.","'Transition' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useMutation' is defined but never used.","'FETCH_CART_QUERY' is defined but never used.","'Rail' is defined but never used.","'loading' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Image' is defined but never used.","'useContext' is defined but never used.","'AuthContext' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Label' is defined but never used.","'DELETE_CART_ITEM_MUTATION' is assigned a value but never used.","'Checkbox' is defined but never used.","'setErrors' is assigned a value but never used.","'useState' is defined but never used.","'Grid' is defined but never used.","'Progress' is defined but never used.","'Item' is defined but never used.","'amountItem' is assigned a value but never used.","'setAmountItem' is assigned a value but never used.","'progressStyle' is assigned a value but never used.","'labelStyles' is assigned a value but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'Message' is defined but never used.","'visible' is assigned a value but never used.","'handleDismiss' is assigned a value but never used.","'FETCH_POSTS_QUERY' is defined but never used.","'FETCH_ITEM_QUERY' is assigned a value but never used.","'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Form' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'List' is defined but never used.","'Input' is defined but never used.","'deleteItemCart' is assigned a value but never used.","'useSubscription' is defined but never used.",["814"],["815"],"'setVisible' is assigned a value but never used.","'ItemAttachedOnChat' is defined but never used.",["814"],["815"],"no-global-assign","no-unsafe-negation"]